{
  "basePath": "/pdf/stamp/1.0",
  "paths": {
    "/jobs/{jobId}/streams/result": {"get": {
      "summary": "Get the current/first result stream",
      "security": [{"oauth2schema": ["global"]}],
      "deprecated": false,
      "produces": [
        "application/octet-stream",
        "application/json;charset=UTF-8"
      ],
      "description": "Get the PDF stamper as binary stream/file.\r\nOur API generation does not allow changing the media type based on the Accepted header unfortunately.\r\nThis means we use a separate path postfix with the value '/stream'.\r\nThis API only returns the PDF when the response status is DONE.",
      "operationId": "getFirstStream",
      "responses": {
        "200": {
          "schema": {
            "format": "byte",
            "type": "string"
          },
          "description": "PDF successfully created and returned"
        },
        "202": {
          "schema": {
            "format": "int32",
            "maximum": 127,
            "type": "integer",
            "minimum": -128
          },
          "description": "PDF not yet created. Job is still executing. Will return the JSON job instead of the PDF"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "PDF could not be created."
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid job id. No response body is supplied"
        }
      },
      "parameters": [{
        "in": "path",
        "name": "jobId",
        "description": "jobId",
        "type": "string",
        "required": true
      }],
      "tags": ["Jobs"]
    }},
    "/sync/streams/content": {"post": {
      "summary": "Execute a synchronous stamp job with a content request/response.",
      "security": [{"oauth2schema": ["global"]}],
      "deprecated": false,
      "produces": ["application/json;charset=UTF-8"],
      "description": "Execute a synchronous stamp job using the given configId. Header parameters will be parsed for additional template variables.",
      "operationId": "syncJobContent",
      "responses": {
        "200": {
          "schema": {"$ref": "#/definitions/ContentResponse"},
          "description": "The PDF stamper job ran successfully"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "The PDF stamper job failed"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid config id"
        }
      },
      "parameters": [{
        "schema": {"$ref": "#/definitions/ContentRequest"},
        "in": "body",
        "name": "contentRequest",
        "description": "File content",
        "required": true
      }],
      "tags": ["Synchronous"],
      "consumes": ["application/json;charset=UTF-8"]
    }},
    "/config/{configId}": {
      "get": {
        "summary": "Get PDF stamper configuration",
        "security": [{"oauth2schema": ["global"]}],
        "deprecated": false,
        "produces": ["application/json;charset=UTF-8"],
        "description": "Retrieve a PDF stamper configuration.",
        "operationId": "getConfiguration",
        "responses": {"200": {
          "schema": {"$ref": "#/definitions/StamperConfigResponse"},
          "description": "A PdfStamperConfigContainer object"
        }},
        "parameters": [{
          "in": "path",
          "name": "configId",
          "description": "The PDF stamper configuration id",
          "type": "string",
          "required": true
        }],
        "tags": ["Config"]
      },
      "delete": {
        "summary": "Delete PDF stamper configuration",
        "security": [{"oauth2schema": ["global"]}],
        "deprecated": false,
        "produces": ["application/json;charset=UTF-8"],
        "description": "Delete a PDF stamper configuration.",
        "operationId": "deleteConfiguration",
        "responses": {"200": {
          "schema": {"$ref": "#/definitions/StamperConfigResponse"},
          "description": "A PdfStamperConfigContainer object"
        }},
        "parameters": [{
          "in": "path",
          "name": "configId",
          "description": "The PDF stamper configuration id",
          "type": "string",
          "required": true
        }],
        "tags": ["Config"]
      },
      "put": {
        "summary": "Update PDF stamper configuration",
        "security": [{"oauth2schema": ["global"]}],
        "deprecated": false,
        "produces": ["application/json;charset=UTF-8"],
        "description": "Update an existing PDF stamper configuration.",
        "operationId": "updateConfiguration",
        "responses": {"200": {
          "schema": {"$ref": "#/definitions/StamperConfigResponse"},
          "description": "A PdfStamperConfigContainer object"
        }},
        "parameters": [
          {
            "in": "path",
            "name": "configId",
            "description": "The PDF stamper configuration id",
            "type": "string",
            "required": true
          },
          {
            "schema": {"$ref": "#/definitions/StamperConfig"},
            "in": "body",
            "name": "stampConfiguration",
            "description": "The PDF stamper configuration",
            "required": true
          }
        ],
        "tags": ["Config"],
        "consumes": ["application/json;charset=UTF-8"]
      }
    },
    "/jobs": {
      "post": {
        "summary": "Create PDF stamper job",
        "security": [{"oauth2schema": ["global"]}],
        "deprecated": false,
        "produces": ["application/json;charset=UTF-8"],
        "description": "Create a job using the given settings.",
        "operationId": "createJob",
        "responses": {"201": {
          "schema": {"$ref": "#/definitions/PdfStamperJobResult"},
          "description": "PDF stamper job created but not started yet"
        }},
        "parameters": [{
          "schema": {"$ref": "#/definitions/PdfStamperJobRequest"},
          "in": "body",
          "name": "jobRequest",
          "description": "jobRequest",
          "required": true
        }],
        "tags": ["Jobs"],
        "consumes": ["application/json;charset=UTF-8"]
      },
      "get": {
        "summary": "Get all jobs",
        "security": [{"oauth2schema": ["global"]}],
        "deprecated": false,
        "produces": ["application/json;charset=UTF-8"],
        "description": "Get all PDF stamper job definitions and their current state.",
        "operationId": "getJobs",
        "responses": {"200": {
          "schema": {
            "type": "array",
            "items": {"$ref": "#/definitions/PdfStamperJobResult"}
          },
          "description": "All PDF jobs that have not been deleted"
        }},
        "parameters": [{
          "in": "query",
          "allowEmptyValue": false,
          "name": "jobStatuses",
          "description": "A list of jobStatuses to filter on.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CREATED",
              "INPUTS_UPLOADED",
              "PROCESSING",
              "DONE",
              "ERROR",
              "DELETED"
            ]
          },
          "collectionFormat": "multi",
          "required": false,
          "enum": [
            "CREATED",
            "INPUTS_UPLOADED",
            "PROCESSING",
            "DONE",
            "ERROR",
            "DELETED"
          ]
        }],
        "tags": ["Jobs"]
      }
    },
    "/jobs/{jobId}/streams/content": {"post": {
      "summary": "Upload a base64 encoded file",
      "security": [{"oauth2schema": ["global"]}],
      "deprecated": false,
      "produces": ["application/json;charset=UTF-8"],
      "description": "Upload an image, office or pdf for conversion to PDF, embedded in a json as a base64 encoded string",
      "operationId": "addContent",
      "responses": {
        "200": {
          "schema": {"$ref": "#/definitions/PdfStamperJobResult"},
          "description": "File content uploaded. The JSON Job response will be returned in the body."
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Job could not be stored/processed"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid job id."
        }
      },
      "parameters": [
        {
          "schema": {"$ref": "#/definitions/ContentRequest"},
          "in": "body",
          "name": "contentRequest",
          "description": "Content request",
          "required": true
        },
        {
          "in": "path",
          "name": "jobId",
          "description": "jobId",
          "type": "string",
          "required": true
        }
      ],
      "tags": ["Jobs"],
      "consumes": ["application/json;charset=UTF-8"]
    }},
    "/sync/streams/location": {"post": {
      "summary": "Execute a synchronous stamp job with a streamlocation.",
      "security": [{"oauth2schema": ["global"]}],
      "deprecated": false,
      "produces": ["application/json;charset=UTF-8"],
      "description": "Execute a synchronous stamp job using the given configId. Header parameters will be parsed for additional template variables.",
      "operationId": "syncJobStreamLocation",
      "responses": {
        "200": {
          "schema": {"$ref": "#/definitions/PdfStamperJobResult"},
          "description": "The PDF stamper job ran successfully"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "The PDF stamper job failed"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid config id"
        }
      },
      "parameters": [{
        "schema": {"$ref": "#/definitions/PdfStamperJobRequest"},
        "in": "body",
        "name": "jobRequest",
        "description": "Job request",
        "required": true
      }],
      "tags": ["Synchronous"],
      "consumes": ["application/json;charset=UTF-8"]
    }},
    "/jobs/{jobId}/streams/location": {"post": {
      "summary": "Add Input Stream Location(s)",
      "security": [{"oauth2schema": ["global"]}],
      "deprecated": false,
      "produces": ["application/json;charset=UTF-8"],
      "description": "Add image, office or pdf input stream location(s) from the storage API for conversion to PDF. Please note that you can upload multiple files. Conversion will not be started yet.",
      "operationId": "addInputStreamLocations",
      "responses": {
        "200": {
          "schema": {"$ref": "#/definitions/PdfStamperJobResult"},
          "description": "Stream location(s) added. The JSON Job response will be returned in the body."
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Job could not be stored/processed"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid job id."
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "jobId",
          "description": "jobId",
          "type": "string",
          "required": true
        },
        {
          "schema": {
            "type": "array",
            "items": {"$ref": "#/definitions/InputResultLocation"}
          },
          "in": "body",
          "name": "streamLocations",
          "description": "The (additional) binary image or PDF (file/inputstream) to convert to PDF",
          "required": true
        }
      ],
      "tags": ["Jobs"],
      "consumes": ["application/json;charset=UTF-8"]
    }},
    "/config/{configId}/streams/multipart": {"post": {
      "summary": "Upload a configuration resource",
      "security": [{"oauth2schema": ["global"]}],
      "deprecated": false,
      "produces": ["application/json;charset=UTF-8"],
      "description": "Upload a resource needed by a configuration.",
      "operationId": "uploadResource",
      "responses": {"200": {
        "schema": {"$ref": "#/definitions/StreamLocation"},
        "description": "A StreamLocation object"
      }},
      "parameters": [
        {
          "in": "path",
          "name": "configId",
          "description": "configId",
          "type": "string",
          "required": true
        },
        {
          "in": "formData",
          "name": "stream",
          "description": "The resource data",
          "type": "file",
          "required": true
        }
      ],
      "tags": ["Config"],
      "consumes": ["multipart/form-data"]
    }},
    "/jobs/{jobId}": {
      "get": {
        "summary": "Job definition and state",
        "security": [{"oauth2schema": ["global"]}],
        "deprecated": false,
        "produces": ["application/json;charset=UTF-8"],
        "description": "Get the PDF stamper job definition and current state. Please note that you can differentiate based on http response status.",
        "operationId": "getJob",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/PdfStamperJobResult"},
            "description": "PDF job returned and Job is done processing"
          },
          "202": {
            "schema": {"$ref": "#/definitions/PdfStamperJobResult"},
            "description": "PDF job returned and Job is still processing"
          },
          "404": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid job id"
          }
        },
        "parameters": [{
          "in": "path",
          "name": "jobId",
          "description": "jobId",
          "type": "string",
          "required": true
        }],
        "tags": ["Jobs"]
      },
      "delete": {
        "summary": "Delete a job manually",
        "security": [{"oauth2schema": ["global"]}],
        "deprecated": false,
        "produces": ["application/json;charset=UTF-8"],
        "description": "Delete the PDF stamper job and all related files depending on the lifecycle.",
        "operationId": "deleteJob",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/PdfStamperJobResult"},
            "description": "PDF job returned and Job is done processing"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Could not delete all parts"
          },
          "404": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid job id"
          }
        },
        "parameters": [{
          "in": "path",
          "name": "jobId",
          "description": "jobId",
          "type": "string",
          "required": true
        }],
        "tags": ["Jobs"]
      },
      "put": {
        "summary": "Submit PDF stamper job for processing",
        "security": [{"oauth2schema": ["global"]}],
        "deprecated": false,
        "produces": ["application/json;charset=UTF-8"],
        "description": "Start PDF stamper job for processing. Stamp one or more configurations on the previously uploaded PDFs. If the optional settings are supplied with the job in the request body, they are being used, otherwise the settings created during job creation are being used. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR.",
        "operationId": "submitJob",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/PdfStamperJobResult"},
            "description": "Conversion job submitted"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Resubmitted job not allowed because the job is currently processing or already processed and had status DONE"
          },
          "404": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid job id"
          }
        },
        "parameters": [{
          "in": "path",
          "name": "jobId",
          "description": "jobId",
          "type": "string",
          "required": true
        }],
        "tags": ["Jobs"],
        "consumes": ["application/json;charset=UTF-8"]
      }
    },
    "/config": {"post": {
      "summary": "Create PDF stamper configuration",
      "security": [{"oauth2schema": ["global"]}],
      "deprecated": false,
      "produces": ["application/json;charset=UTF-8"],
      "description": "Create / initialize a new PDF stamper configuration.",
      "operationId": "createConfiguration",
      "responses": {"201": {
        "schema": {"$ref": "#/definitions/StamperConfigResponse"},
        "description": "PDF Stamp configuration has been successfully created."
      }},
      "parameters": [{
        "schema": {"$ref": "#/definitions/StamperConfig"},
        "in": "body",
        "name": "stampConfiguration",
        "description": "The PDF stamper configuration",
        "required": true
      }],
      "tags": ["Config"],
      "consumes": ["application/json;charset=UTF-8"]
    }},
    "/config/{configId}/streams": {"delete": {
      "summary": "Delete resources",
      "security": [{"oauth2schema": ["global"]}],
      "deprecated": false,
      "produces": ["*/*"],
      "description": "Delete resources referenced by a configuration.",
      "operationId": "deleteResources",
      "responses": {"200": {"description": "The resources were deleted successfully"}},
      "parameters": [
        {
          "in": "path",
          "name": "configId",
          "description": "The PDF stamper configuration id",
          "type": "string",
          "required": true
        },
        {
          "schema": {
            "type": "array",
            "items": {"$ref": "#/definitions/StreamLocation"}
          },
          "in": "body",
          "name": "streamLocations",
          "description": "The resource locations in storage",
          "required": true
        }
      ],
      "tags": ["Config"]
    }},
    "/jobs/{jobId}/streams/multipart": {"post": {
      "summary": "Upload a file",
      "security": [{"oauth2schema": ["global"]}],
      "deprecated": false,
      "produces": ["application/json;charset=UTF-8"],
      "description": "Upload a pdf to stamp one or more configurations. Please note that you can upload multiple files.",
      "operationId": "addInputFile",
      "responses": {
        "200": {
          "schema": {"$ref": "#/definitions/PdfStamperJobResult"},
          "description": "File uploaded. The JSON Job response will be returned in the body."
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Job could not be stored/processed"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid job id."
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "jobId",
          "description": "jobId",
          "type": "string",
          "required": true
        },
        {
          "in": "formData",
          "name": "stream",
          "description": "The (additional) binary image or PDF (file/inputstream) to convert to PDF",
          "type": "file",
          "required": true
        }
      ],
      "tags": ["Jobs"],
      "consumes": ["multipart/form-data"]
    }},
    "/jobs/{jobId}/streams/result/{correlationId}": {"get": {
      "summary": "Get the result stream by correlation Id",
      "security": [{"oauth2schema": ["global"]}],
      "deprecated": false,
      "produces": [
        "application/octet-stream",
        "application/json;charset=UTF-8"
      ],
      "description": "Get the PDF stamper as binary stream/file by correlation Id.\r\nOur API generation does not allow changing the media type based on the Accepted header unfortunately.\r\nThis means we use a separate path postfix with the value '/stream'.\r\nThis API only returns the PDF when the response status is DONE.",
      "operationId": "getStreamById",
      "responses": {
        "200": {
          "schema": {
            "format": "byte",
            "type": "string"
          },
          "description": "PDF successfully created and returned"
        },
        "202": {
          "schema": {
            "format": "int32",
            "maximum": 127,
            "type": "integer",
            "minimum": -128
          },
          "description": "PDF not yet created. Job is still executing. Will return the JSON job instead of the PDF"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "PDF could not be created."
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid job id. No response body is supplied"
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "correlationId",
          "description": "correlationId",
          "type": "string",
          "required": true
        },
        {
          "in": "path",
          "name": "jobId",
          "description": "jobId",
          "type": "string",
          "required": true
        }
      ],
      "tags": ["Jobs"]
    }}
  },
  "host": "gw.api.cloud.sphereon.com",
  "schemes": ["https"],
  "securityDefinitions": {"oauth2schema": {
    "tokenUrl": "https://gw.api.cloud.sphereon.com/token",
    "scopes": {"global": "accessEverything"},
    "type": "oauth2",
    "flow": "application"
  }},
  "definitions": {
    "RGBValue": {
      "description": "A Red Green Blue color value combination",
      "type": "object",
      "title": "RGBValue",
      "required": [
        "b",
        "g",
        "r"
      ],
      "properties": {
        "b": {
          "format": "int32",
          "type": "integer"
        },
        "r": {
          "format": "int32",
          "type": "integer"
        },
        "g": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Connector": {
      "description": "Connection between components containing anchor points and offset of the component",
      "type": "object",
      "title": "Connector",
      "required": [
        "horizontalAnchorPoint",
        "verticalAnchorPoint"
      ],
      "properties": {
        "components": {
          "type": "array",
          "items": {"$ref": "#/definitions/StampComponent"}
        },
        "offset": {
          "description": "The optional offset of the components relative to the parent component",
          "$ref": "#/definitions/Point"
        },
        "horizontalAnchorPoint": {
          "description": "The horizontal anchor point to which the components are connected",
          "type": "string",
          "enum": [
            "LEFT",
            "CENTER",
            "RIGHT"
          ]
        },
        "verticalAnchorPoint": {
          "description": "The vertical anchor point to which the components are connected",
          "type": "string",
          "enum": [
            "TOP",
            "MIDDLE",
            "BOTTOM"
          ]
        }
      }
    },
    "VisibleSignature": {
      "type": "object",
      "title": "VisibleSignature",
      "properties": {
        "pageSelector": {
          "xml": {
            "name": "pageSelector",
            "attribute": false,
            "wrapped": false
          },
          "description": "The page for the visible signature (multiple pages is not supported, call multiple stamp configurations if that is desired)",
          "type": "string",
          "enum": [
            "FIRST_PAGE",
            "LAST_PAGE",
            "EVEN_PAGES",
            "ODD_PAGES",
            "ALL_PAGES",
            "SPECIFIC_PAGES"
          ]
        },
        "connector": {
          "xml": {
            "name": "connector",
            "attribute": false,
            "wrapped": false
          },
          "description": "The connector (location) for the visible signature",
          "$ref": "#/definitions/Connector"
        },
        "imageComponent": {
          "xml": {
            "name": "imageComponent",
            "attribute": false,
            "wrapped": false
          },
          "description": "The image for the visible signature",
          "$ref": "#/definitions/ImageComponent"
        }
      }
    },
    "StampComponent": {
      "type": "object",
      "title": "StampComponent",
      "properties": {
        "border": {
          "xml": {
            "name": "border",
            "attribute": false,
            "wrapped": false
          },
          "description": "The border of the component",
          "$ref": "#/definitions/Border"
        },
        "connectors": {
          "xml": {
            "name": "connectors",
            "attribute": false,
            "wrapped": false
          },
          "description": "Connectors containing components that can be positioned relative to this component",
          "type": "array",
          "items": {"$ref": "#/definitions/Connector"}
        },
        "offset": {
          "xml": {
            "name": "offset",
            "attribute": false,
            "wrapped": false
          },
          "description": "The offset of the component relative to the parent component",
          "$ref": "#/definitions/Point"
        }
      },
      "discriminator": "type"
    },
    "HyperlinkComponent": {
      "allOf": [
        {"$ref": "#/definitions/StampComponent"},
        {
          "description": "A hyperlink component to stamp a hyperlink, which is a transparent overlay. Meaning it will create a box you can overlay onto text. Any URL will not\nbe visible in the result PDF. Clicking the transparent box brings you to the provided URL.\nSo typically you want to create an Image, Barcode or text first and then at the same location create a hyperlink componen to make it clickable.\n",
          "type": "object",
          "title": "HyperlinkComponent",
          "required": [
            "address",
            "height",
            "width"
          ],
          "properties": {
            "address": {
              "description": "The hyperlink address (URL)",
              "type": "string"
            },
            "width": {
              "format": "int32",
              "description": "The preferred width in pixels",
              "type": "integer"
            },
            "height": {
              "format": "int32",
              "description": "The preferred height in pixels",
              "type": "integer"
            }
          }
        }
      ],
      "description": "A hyperlink component to stamp a hyperlink, which is a transparent overlay. Meaning it will create a box you can overlay onto text. Any URL will not\nbe visible in the result PDF. Clicking the transparent box brings you to the provided URL.\nSo typically you want to create an Image, Barcode or text first and then at the same location create a hyperlink componen to make it clickable.\n",
      "title": "HyperlinkComponent"
    },
    "ContentResponse": {
      "xml": {
        "name": "ContentResponse",
        "attribute": false,
        "wrapped": false
      },
      "description": "The content response base64 encoded",
      "type": "object",
      "title": "ContentResponse",
      "properties": {
        "filename": {
          "xml": {
            "name": "filename",
            "attribute": false,
            "wrapped": false
          },
          "readOnly": true,
          "type": "string"
        },
        "mediaType": {
          "xml": {
            "name": "mediaType",
            "attribute": false,
            "wrapped": false
          },
          "readOnly": true,
          "type": "string"
        },
        "content": {
          "xml": {
            "name": "content",
            "attribute": false,
            "wrapped": false
          },
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "CertificateSettings": {
      "description": "The PDF Certificate signature settings",
      "type": "object",
      "title": "CertificateSettings",
      "required": [
        "certificateName",
        "certificateVersion",
        "cryptoKeysConfigName"
      ],
      "properties": {
        "certificateVersion": {
          "description": "The optional version of the certificate from the crypto-keys configuration to use. Can be the value 'latest' to automatically use the latest version. The certificate (version) has to be present in the crypto-keys API",
          "type": "string"
        },
        "cryptoKeysConfigName": {
          "description": "The Crypto Keys configuration name to use. The name has to be created in the crypto-keys API",
          "type": "string"
        },
        "certificateName": {
          "description": "The name of the certificate from the crypto-keys configuration to use. The certificate has to be present in the crypto-keys API",
          "type": "string"
        }
      }
    },
    "PdfStamperJobResult": {
      "xml": {
        "name": "jobResult",
        "attribute": false,
        "wrapped": false
      },
      "description": "The PDF Stamper job.",
      "type": "object",
      "title": "PdfStamperJobResult",
      "properties": {
        "completionTime": {
          "format": "date-time",
          "description": "The completion date/time of this job in ISO 8601 format",
          "readOnly": true,
          "type": "string"
        },
        "jobId": {
          "description": "The job id",
          "readOnly": true,
          "type": "string"
        },
        "request": {
          "description": "The request settings used during executing the PDF Stamper job",
          "readOnly": true,
          "$ref": "#/definitions/PdfStamperJobRequest"
        },
        "jobStatus": {
          "description": "The status of the job",
          "readOnly": true,
          "type": "string",
          "enum": [
            "CREATED",
            "INPUTS_UPLOADED",
            "PROCESSING",
            "DONE",
            "ERROR",
            "DELETED"
          ]
        },
        "creationTime": {
          "format": "date-time",
          "description": "The creation date/time of this job in ISO 8601 format",
          "readOnly": true,
          "type": "string"
        },
        "inputResults": {
          "description": "The input(s) and result(s) streamlocation pairs",
          "readOnly": true,
          "type": "array",
          "items": {"$ref": "#/definitions/InputResultLocation"}
        },
        "updateTime": {
          "format": "date-time",
          "description": "The last update date/time of this job in ISO 8601 format",
          "readOnly": true,
          "type": "string"
        },
        "statusMessage": {
          "description": "A status message, which can be informational, warning or error. A message here does not indicate an error per se",
          "readOnly": true,
          "type": "string"
        },
        "queueTime": {
          "format": "date-time",
          "description": "The PDF Stamper queue date/time of this job in ISO 8601 format",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "LineComponent": {
      "allOf": [
        {"$ref": "#/definitions/StampComponent"},
        {
          "description": "A line component to stamp a line on a pdf",
          "type": "object",
          "title": "LineComponent",
          "required": ["lineTo"],
          "properties": {
            "color": {
              "description": "The color of the line",
              "$ref": "#/definitions/Color"
            },
            "lineTo": {
              "description": "The point to which the line should be drawn. The origin is derived from the X and Y coordinate of the component itself (bottom-left) ",
              "$ref": "#/definitions/Point"
            },
            "lineWidth": {
              "format": "float",
              "description": "The thickness of the line",
              "type": "number"
            }
          }
        }
      ],
      "description": "A line component to stamp a line on a pdf",
      "title": "LineComponent"
    },
    "StreamLocation": {
      "description": "Location record of data stream",
      "type": "object",
      "title": "StreamLocation",
      "properties": {
        "folderPath": {"type": "string"},
        "filename": {"type": "string"},
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "containerId": {"type": "string"},
        "originalFilename": {"type": "string"}
      }
    },
    "PdfStamperJobRequest": {
      "description": "PDF stamper job request settings",
      "type": "object",
      "title": "PdfStamperJobRequest",
      "required": [
        "configIds",
        "inputResults"
      ],
      "properties": {
        "jobLifecycles": {
          "description": "The lifecycles of the job itself",
          "type": "array",
          "items": {"$ref": "#/definitions/Lifecycle"}
        },
        "inlineConfig": {
          "description": "Optional job specific config that can be supplied inline. Will be merged with the specified configuration. ",
          "$ref": "#/definitions/StamperConfig"
        },
        "variables": {
          "description": "A map with key-values used to replace template variables in components.",
          "additionalProperties": {"type": "string"},
          "type": "object"
        },
        "resultSettings": {
          "description": "The result file and lifecycle settings",
          "$ref": "#/definitions/ResultSettings"
        },
        "configIds": {
          "description": "A list of configuration ids that have to be applied during executing the job.",
          "type": "array",
          "items": {"type": "string"}
        },
        "inputResults": {
          "description": "The input(s) and optional result(s)",
          "type": "array",
          "items": {"$ref": "#/definitions/InputResultLocation"}
        },
        "formFields": {
          "description": "A map with key-values used to input values in a PDF form.",
          "additionalProperties": {"type": "string"},
          "type": "object"
        },
        "inputSettings": {
          "description": "The input file and lifecycle settings",
          "$ref": "#/definitions/InputSettings"
        }
      }
    },
    "ImageComponent": {
      "allOf": [
        {"$ref": "#/definitions/StampComponent"},
        {
          "description": "An image component to stamp an image on a pdf. Supported types are: BMP, GIF, PNG, JPG. You can use a <<StreamLocation>> or base64 string as input for the image. Optionally you can scale the image before it is stamped to a desired size. ",
          "type": "object",
          "title": "ImageComponent",
          "properties": {
            "imageData": {
              "description": "The image as a base64 string if a stream location is not being used",
              "type": "string"
            },
            "scaledDimension": {
              "description": "The preferred dimension of the image",
              "$ref": "#/definitions/Dimension"
            },
            "imageStreamLocation": {
              "description": "The stream location of the image. This is used if image data hasn't been set",
              "$ref": "#/definitions/StreamLocation"
            }
          }
        }
      ],
      "description": "An image component to stamp an image on a pdf. Supported types are: BMP, GIF, PNG, JPG. You can use a <<StreamLocation>> or base64 string as input for the image. Optionally you can scale the image before it is stamped to a desired size. ",
      "title": "ImageComponent"
    },
    "PdfSignatureComponent": {
      "allOf": [
        {"$ref": "#/definitions/StampComponent"},
        {
          "description": "An invisible component that adds a PDF signature",
          "type": "object",
          "title": "PdfSignatureComponent",
          "required": [
            "name",
            "signatureMode"
          ],
          "properties": {
            "reason": {
              "description": "Reason (optional)",
              "type": "string"
            },
            "certificateSettings": {
              "description": "The optional certificate name, version and configuration to use for the signature. If not specified the Sphereon supplied certificate will be used",
              "$ref": "#/definitions/CertificateSettings"
            },
            "visibleSignature": {
              "description": "Visible signature. If not specified, the signature will be invisible in the background",
              "$ref": "#/definitions/VisibleSignature"
            },
            "name": {
              "description": "The name in the signature",
              "type": "string"
            },
            "location": {
              "description": "Location (optional)",
              "type": "string"
            },
            "signatureMode": {
              "description": "The signature mode to use. Only one certification (company/organization seal) can be used for a document and it has to be the first. Many approvals can be used",
              "type": "string",
              "enum": [
                "CERTIFICATION",
                "APPROVAL"
              ]
            }
          }
        }
      ],
      "description": "An invisible component that adds a PDF signature",
      "title": "PdfSignatureComponent"
    },
    "StorageLocation": {
      "description": "Storage Location",
      "type": "object",
      "title": "StorageLocation",
      "properties": {
        "folderPath": {"type": "string"},
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "containerId": {"type": "string"}
      }
    },
    "InputSettings": {
      "description": "Input settings. Specify, if applicable, external location of the inputfile(s)",
      "type": "object",
      "title": "InputSettings",
      "properties": {
        "storageLocation": {
          "description": "Input Storage location. This is where input files will be stored when addInput is called",
          "$ref": "#/definitions/StorageLocation"
        },
        "lifecycles": {
          "description": "The lifecycles of input files",
          "type": "array",
          "items": {"$ref": "#/definitions/Lifecycle"}
        }
      }
    },
    "InputResultLocation": {
      "description": "Input and result streamlocation pair allows to specify an optional result location for the input stream lcoation",
      "type": "object",
      "title": "InputResultLocation",
      "required": ["input"],
      "properties": {
        "result": {
          "description": "Optional result stream location, otherwise the default job settings will be honored for the results",
          "$ref": "#/definitions/StreamLocation"
        },
        "input": {
          "description": "The input stream location of the pre stamped PDF file",
          "$ref": "#/definitions/StreamLocation"
        },
        "correlationId": {
          "description": "The id to associate with this input result location pair. Will be created (using a UUID) if not provided",
          "type": "string"
        }
      }
    },
    "TextComponent": {
      "allOf": [
        {"$ref": "#/definitions/StampComponent"},
        {
          "description": "A text component to stamp text on a pdf. When using TextComponents and multiple lines, we suggest to use multiple components, for precise placement of the text.\nHaving said that, common linebreak characters like `\\r\\n` and `\\n` and unicode variants are supported. Although you can provide a linespacing value, automatic newlines do mean some assumptions will be made.",
          "type": "object",
          "title": "TextComponent",
          "required": ["text"],
          "properties": {
            "nonStrokingColor": {
              "description": "The color of the text",
              "$ref": "#/definitions/Color"
            },
            "fontName": {
              "description": "The font of the text",
              "type": "string"
            },
            "fontSize": {
              "format": "float",
              "description": "The size of the text",
              "type": "number"
            },
            "text": {
              "description": "The text that will be displayed",
              "type": "string"
            },
            "lineSpacing": {
              "format": "float",
              "description": "Linespacing ratio. The default is 0.5 (meaning half a line height). The spacing is only applicable to newlines within a single text component",
              "type": "number"
            }
          }
        }
      ],
      "description": "A text component to stamp text on a pdf. When using TextComponents and multiple lines, we suggest to use multiple components, for precise placement of the text.\nHaving said that, common linebreak characters like `\\r\\n` and `\\n` and unicode variants are supported. Although you can provide a linespacing value, automatic newlines do mean some assumptions will be made.",
      "title": "TextComponent"
    },
    "StamperConfigResponse": {
      "description": "Response with the PDF stamper configuration",
      "type": "object",
      "title": "StamperConfigResponse",
      "properties": {
        "claimParameters": {"$ref": "#/definitions/ClaimParameters"},
        "configResources": {
          "xml": {
            "name": "configResources",
            "attribute": false,
            "wrapped": false
          },
          "description": "Any registered resource used by the configuration",
          "readOnly": true,
          "type": "array",
          "items": {"$ref": "#/definitions/StreamLocation"}
        },
        "creationTime": {
          "xml": {
            "name": "creationTime",
            "attribute": false,
            "wrapped": false
          },
          "format": "date-time",
          "description": "The creation date/time of the initial configuration in ISO 8601 format",
          "readOnly": true,
          "type": "string"
        },
        "credentials": {"$ref": "#/definitions/Credentials"},
        "configId": {
          "xml": {
            "name": "configId",
            "attribute": false,
            "wrapped": false
          },
          "description": "The configuration id",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "xml": {
            "name": "name",
            "attribute": false,
            "wrapped": false
          },
          "description": "An optional configuration name",
          "readOnly": true,
          "type": "string"
        },
        "updateTime": {
          "xml": {
            "name": "updateTime",
            "attribute": false,
            "wrapped": false
          },
          "format": "date-time",
          "description": "The last update date/time of this configuration in ISO 8601 format",
          "readOnly": true,
          "type": "string"
        },
        "configStatus": {
          "xml": {
            "name": "configStatus",
            "attribute": false,
            "wrapped": false
          },
          "description": "The status of the config action",
          "readOnly": true,
          "type": "string",
          "enum": [
            "CREATED",
            "UPDATED",
            "RESOURCE_UPLOADED",
            "ERROR",
            "DELETED",
            "DONE"
          ]
        },
        "config": {
          "xml": {
            "name": "config",
            "attribute": false,
            "wrapped": false
          },
          "description": "The PDF stamper configuration",
          "readOnly": true,
          "$ref": "#/definitions/StamperConfig"
        },
        "statusMessage": {
          "xml": {
            "name": "statusMessage",
            "attribute": false,
            "wrapped": false
          },
          "description": "A status message, which can be informational, warning or error. A message here does not indicate an error per se",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "Color": {
      "description": "A color object",
      "type": "object",
      "title": "Color",
      "properties": {
        "name": {
          "description": "Use one of the common predefined colors, alternatively provide an RGB value in the respective field.",
          "type": "string",
          "enum": [
            "BLACK",
            "WHITE",
            "RED",
            "GREEN",
            "BLUE",
            "YELLOW",
            "CYAN",
            "MAGENTA",
            "PINK",
            "GRAY",
            "DARK_GRAY",
            "LIGHT_GRAY",
            "ORANGE"
          ]
        },
        "rgbValue": {
          "description": "Use a color that is composed out of the red, green and blue values. Alternatively use a predefined color for the respective field.",
          "$ref": "#/definitions/RGBValue"
        }
      }
    },
    "Lifecycle": {
      "description": "Lifecycle settings. When no lifecycle settings are supplied, the job and files will be deleted directly after retrieval of the file",
      "type": "object",
      "title": "Lifecycle",
      "properties": {
        "applicableJobStatuses": {
          "description": "Job status needs to be in this list in order for the action to be performed!",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CREATED",
              "INPUTS_UPLOADED",
              "PROCESSING",
              "DONE",
              "ERROR",
              "DELETED"
            ]
          }
        },
        "actionTime": {
          "format": "date-time",
          "description": "The time at which the job and files will be deleted, regardless of whether it has been retrieved or not. Maximal time is 1 day from job creation",
          "type": "string"
        },
        "action": {
          "description": "The action to perform. Currently only delete is supported",
          "type": "string",
          "enum": [
            "DELETE",
            "NONE"
          ]
        },
        "type": {
          "description": "Determine when to delete the job and associated files.\r\nRETRIEVAL means delete directly after retrieving the PDF file. When the file has not been retrieved before the action time, it will be deleted regardless.\r\nTime means, delete on specific time, regardless of whether it has been processed",
          "type": "string",
          "enum": [
            "RETRIEVAL",
            "TIME"
          ]
        }
      }
    },
    "CanvasComponent": {
      "description": "A canvas space interconnecting zones on the page to stamp components",
      "type": "object",
      "title": "CanvasComponent",
      "required": [
        "pageOperation",
        "pageSelector",
        "position"
      ],
      "properties": {
        "border": {
          "description": "The border of the component",
          "$ref": "#/definitions/Border"
        },
        "specificPages": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "connectors": {
          "description": "Connectors containing components that can be positioned relative to this component",
          "type": "array",
          "items": {"$ref": "#/definitions/Connector"}
        },
        "pageSelector": {
          "description": "Prescribes the page(s) the component needs to be overlay-ed on.",
          "type": "string",
          "enum": [
            "FIRST_PAGE",
            "LAST_PAGE",
            "EVEN_PAGES",
            "ODD_PAGES",
            "ALL_PAGES",
            "SPECIFIC_PAGES"
          ]
        },
        "offset": {
          "description": "The offset of the component relative to the parent component",
          "$ref": "#/definitions/Point"
        },
        "pageOperation": {
          "description": "The operation that should be executed with the stamp component",
          "type": "string",
          "enum": ["STAMP"]
        },
        "position": {
          "description": "The position where the stamp end up relative to existing content. Only foreground is supported for now",
          "type": "string",
          "enum": [
            "FOREGROUND",
            "BACKGROUND"
          ]
        }
      }
    },
    "Error": {
      "description": "An error",
      "type": "object",
      "title": "Error",
      "required": [
        "code",
        "level",
        "message"
      ],
      "properties": {
        "code": {"type": "string"},
        "level": {
          "type": "string",
          "enum": [
            "INFO",
            "WARNING",
            "FATAL"
          ]
        },
        "cause": {"$ref": "#/definitions/Error"},
        "message": {"type": "string"}
      }
    },
    "ResultSettings": {
      "description": "Result settings",
      "type": "object",
      "title": "ResultSettings",
      "required": ["storageMode"],
      "properties": {
        "storageMode": {
          "description": "Storage mode. Can be a configured storage location on the storage API, a job id folder in the supplied storage location or completely replacing the input files (streamlocations).",
          "type": "string",
          "enum": [
            "STORAGE_LOCATION",
            "STORAGE_LOCATION_JOB_IDS",
            "REPLACE_INPUT"
          ]
        },
        "storageLocation": {
          "description": "Result Storage location",
          "$ref": "#/definitions/StorageLocation"
        },
        "lifecycles": {
          "description": "The lifecycles of result files",
          "type": "array",
          "items": {"$ref": "#/definitions/Lifecycle"}
        }
      }
    },
    "Dimension": {
      "description": "Dimensions for an object. It requires a width, height and unit, which currently is only in Points",
      "type": "object",
      "title": "Dimension",
      "required": [
        "height",
        "unit",
        "width"
      ],
      "properties": {
        "unit": {
          "type": "string",
          "enum": ["pt"]
        },
        "width": {
          "format": "float",
          "type": "number"
        },
        "height": {
          "format": "float",
          "type": "number"
        }
      }
    },
    "Point": {
      "description": "Location point",
      "type": "object",
      "title": "Point",
      "required": [
        "unit",
        "x",
        "y"
      ],
      "properties": {
        "unit": {
          "description": "The unit (pt)",
          "type": "string",
          "enum": ["pt"]
        },
        "x": {
          "format": "float",
          "description": "X coordinate",
          "type": "number"
        },
        "y": {
          "format": "float",
          "description": "Y coordinate",
          "type": "number"
        }
      }
    },
    "StamperConfig": {
      "description": "The PDF stamper configuration",
      "type": "object",
      "title": "StamperConfig",
      "required": ["canvasComponents"],
      "properties": {
        "signatureComponent": {
          "description": "Optional PDF signature component. Adds a PDF signature to the PDF document. ",
          "$ref": "#/definitions/PdfSignatureComponent"
        },
        "blockchainConfig": {
          "description": "Optional blockchain proof configuration. This is applicable to all stamps created using this configuration. ",
          "$ref": "#/definitions/BlockchainConfig"
        },
        "defaultJobSettings": {
          "description": "Default job settings. Values omitted from the job will get default settings specified in here",
          "$ref": "#/definitions/DefaultJobSettings"
        },
        "configResourcesLocation": {
          "description": "The storage location where the configuration resources will be stored",
          "$ref": "#/definitions/StorageLocation"
        },
        "canvasComponents": {
          "description": "The canvas components containing the information of the stamp",
          "type": "array",
          "items": {"$ref": "#/definitions/CanvasComponent"}
        }
      }
    },
    "ClaimParameters": {
      "type": "object",
      "title": "ClaimParameters",
      "properties": {
        "apiEndUser": {
          "xml": {
            "name": "apiEndUser",
            "attribute": false,
            "wrapped": false
          },
          "type": "string"
        },
        "applicationId": {
          "xml": {
            "name": "applicationId",
            "attribute": false,
            "wrapped": false
          },
          "type": "string"
        },
        "keyType": {
          "xml": {
            "name": "keyType",
            "attribute": false,
            "wrapped": false
          },
          "type": "string"
        },
        "sphereonIdentifier": {
          "xml": {
            "name": "sphereonIdentifier",
            "attribute": false,
            "wrapped": false
          },
          "type": "string"
        },
        "apiSupplierTenantId": {
          "xml": {
            "name": "apiSupplierTenantId",
            "attribute": false,
            "wrapped": false
          },
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "description": "The error response",
      "type": "object",
      "title": "ErrorResponse",
      "properties": {"errors": {
        "type": "array",
        "items": {"$ref": "#/definitions/Error"}
      }}
    },
    "BlockchainConfig": {
      "description": "The Blockchain configuration",
      "type": "object",
      "title": "BlockchainConfig",
      "required": [
        "blockchainAnchors",
        "proofConfigName"
      ],
      "properties": {
        "blockchainAnchors": {
          "description": "The states at which to create a blockchain anchor. This can be the original file (before stamp)the stamped file, or both",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "BEFORE_STAMP",
              "AFTER_STAMP"
            ]
          }
        },
        "proofConfigName": {
          "description": "The blockchain proof configuration name to use. The name has to be created in the blockchain-proof API",
          "type": "string"
        }
      }
    },
    "DefaultJobSettings": {
      "description": "Default PDF Stamper job settings. Whenever a job does not submit the settings, the defaults will be used.",
      "type": "object",
      "title": "DefaultJobSettings",
      "properties": {
        "variables": {
          "description": "A map with key-values used to replace template variables in components. These are optional defaults. Values in job specific variables will overwrite default values.",
          "additionalProperties": {"type": "string"},
          "type": "object"
        },
        "resultSettings": {
          "description": "The default result file and lifecycle settings",
          "$ref": "#/definitions/ResultSettings"
        },
        "formFields": {
          "description": "Form fields are filled out in PDF forms. These are default values used in the job. Please note that these are different from variables, as the latter can only be used for text, barcode and hyperlink components, whilst the form-fields as the name implies are for filling out PDF forms",
          "additionalProperties": {"type": "string"},
          "type": "object"
        },
        "inputSettings": {
          "description": "The default input file and lifecycle settings",
          "$ref": "#/definitions/InputSettings"
        }
      }
    },
    "ContentRequest": {
      "xml": {
        "name": "ContentRequest",
        "attribute": false,
        "wrapped": false
      },
      "description": "Content request",
      "type": "object",
      "title": "ContentRequest",
      "required": [
        "configIds",
        "content",
        "filename"
      ],
      "properties": {
        "variables": {
          "description": "A map with key-values used to replace template variables in components.",
          "additionalProperties": {"type": "string"},
          "type": "object"
        },
        "filename": {
          "description": "The filename",
          "type": "string"
        },
        "configIds": {
          "description": "A list of configuration ids that have to be applied during executing the job.",
          "type": "array",
          "items": {"type": "string"}
        },
        "formFields": {
          "description": "A map with key-values used to fill out PDF forms. Please note that this is different from using variables. Variables are used in texts, hyperlinks and barcodes",
          "additionalProperties": {"type": "string"},
          "type": "object"
        },
        "content": {
          "description": "The file as a base64 encoded string",
          "type": "string"
        }
      }
    },
    "BarcodeComponent": {
      "allOf": [
        {"$ref": "#/definitions/StampComponent"},
        {
          "description": "A barcode component to stamp a barcode or QR code on a pdf",
          "type": "object",
          "title": "BarcodeComponent",
          "required": [
            "barcodeFormat",
            "content",
            "height",
            "width"
          ],
          "properties": {
            "errorCorrectionLevel": {
              "description": "Specifies what degree of error correction to use, for example in QR Codes, See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels defined by the QR code standard",
              "type": "string",
              "enum": [
                "QR_L",
                "QR_M",
                "QR_Q",
                "QR_H"
              ]
            },
            "barcodeFormat": {
              "description": "The barcode format to generate",
              "type": "string",
              "enum": [
                "AZTEC",
                "CODABAR",
                "CODE_39",
                "CODE_93",
                "CODE_128",
                "DATA_MATRIX",
                "EAN_8",
                "EAN_13",
                "ITF",
                "MAXICODE",
                "PDF_417",
                "QR_CODE",
                "RSS_14",
                "RSS_EXPANDED",
                "UPC_A",
                "UPC_E",
                "UPC_EAN_EXTENSION"
              ]
            },
            "width": {
              "format": "int32",
              "description": "The preferred width in pixels",
              "type": "integer"
            },
            "content": {
              "description": "The contents to encode in the barcode",
              "type": "string"
            },
            "height": {
              "format": "int32",
              "description": "The preferred height in pixels",
              "type": "integer"
            },
            "qrVersion": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      ],
      "description": "A barcode component to stamp a barcode or QR code on a pdf",
      "title": "BarcodeComponent"
    },
    "BlockchainProofComponent": {
      "allOf": [
        {"$ref": "#/definitions/StampComponent"},
        {
          "description": "An invisible component that does a blockchain registration",
          "type": "object",
          "title": "BlockchainProofComponent",
          "required": ["proofConfigName"],
          "properties": {
            "blockchainAnchors": {
              "description": "The states at which to create a blockchain anchor. This can be the original file (before stamp)the stamped file, or both",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "BEFORE_STAMP",
                  "AFTER_STAMP"
                ]
              }
            },
            "proofConfigName": {
              "description": "The blockchain proof configuration name to use",
              "type": "string"
            }
          }
        }
      ],
      "description": "An invisible component that does a blockchain registration",
      "title": "BlockchainProofComponent"
    },
    "Border": {
      "description": "Optional border of a component",
      "type": "object",
      "title": "Border",
      "required": ["color"],
      "properties": {
        "color": {
          "description": "The color of the border",
          "$ref": "#/definitions/Color"
        },
        "thickness": {
          "format": "float",
          "description": "The thickness of the border line, which is 1 by default",
          "type": "number"
        }
      }
    },
    "Credentials": {
      "type": "object",
      "title": "Credentials",
      "properties": {
        "credentialType": {
          "type": "string",
          "enum": [
            "NoCredentials",
            "OAuthCredentials",
            "BearerTokenCredentials",
            "UsernamePasswordCredentials",
            "OAuth2ClientCredentials"
          ]
        },
        "authenticationProvider": {
          "type": "string",
          "enum": [
            "API_SUPPLIER",
            "API_IMPLEMENTER"
          ]
        }
      }
    }
  },
  "swagger": "2.0",
  "info": {
    "license": {
      "name": "Apache License Version 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "contact": {
      "name": "Sphereon DevOps Team",
      "url": "https://sphereon.com",
      "email": "dev@sphereon.com"
    },
    "description": "The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements. The API also supports digital signatures (blue bar), blockchain registrations and filling out forms\r\n\r\nThe flow is generally as follows:\r\n1. Make a configuration containing the stamp information\r\n2. Create a job specifying the desired configuration\r\n3. Add one or more PDF files to the job\r\n4. Start the job for processing\r\n5. Retrieve the processed files\r\n\r\nFull API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0\r\nInteractive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com",
    "termsOfService": "https://docs.sphereon.com/api/pdf-stamper/1.0",
    "title": "PDF stamper",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "Config",
      "description": "API for PDF stamper configuration"
    },
    {
      "name": "Jobs",
      "description": "PDF stamper job related API's"
    },
    {
      "name": "Synchronous",
      "description": "API for PDF stamper synchronous functions"
    }
  ]
}