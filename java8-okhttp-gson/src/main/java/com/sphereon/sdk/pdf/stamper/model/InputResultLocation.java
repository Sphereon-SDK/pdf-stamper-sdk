/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.pdf.stamper.model.StreamLocation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Input and result streamlocation pair allows to specify an optional result location for the input stream lcoation
 */
@ApiModel(description = "Input and result streamlocation pair allows to specify an optional result location for the input stream lcoation")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-09T04:53:18.701Z")
public class InputResultLocation {
  @SerializedName("result")
  private StreamLocation result = null;

  @SerializedName("input")
  private StreamLocation input = null;

  @SerializedName("correlationId")
  private String correlationId = null;

  public InputResultLocation result(StreamLocation result) {
    this.result = result;
    return this;
  }

   /**
   * Optional result stream location, otherwise the default job settings will be honored for the results
   * @return result
  **/
  @ApiModelProperty(value = "Optional result stream location, otherwise the default job settings will be honored for the results")
  public StreamLocation getResult() {
    return result;
  }

  public void setResult(StreamLocation result) {
    this.result = result;
  }

  public InputResultLocation input(StreamLocation input) {
    this.input = input;
    return this;
  }

   /**
   * The input stream location of the pre stamped PDF file
   * @return input
  **/
  @ApiModelProperty(required = true, value = "The input stream location of the pre stamped PDF file")
  public StreamLocation getInput() {
    return input;
  }

  public void setInput(StreamLocation input) {
    this.input = input;
  }

  public InputResultLocation correlationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

   /**
   * The id to associate with this input result location pair. Will be created (using a UUID) if not provided
   * @return correlationId
  **/
  @ApiModelProperty(value = "The id to associate with this input result location pair. Will be created (using a UUID) if not provided")
  public String getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputResultLocation inputResultLocation = (InputResultLocation) o;
    return Objects.equals(this.result, inputResultLocation.result) &&
        Objects.equals(this.input, inputResultLocation.input) &&
        Objects.equals(this.correlationId, inputResultLocation.correlationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(result, input, correlationId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputResultLocation {\n");
    
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

