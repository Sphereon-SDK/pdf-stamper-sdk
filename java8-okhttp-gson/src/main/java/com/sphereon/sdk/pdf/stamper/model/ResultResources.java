/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/0.2  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.pdf.stamper.model.StreamLocation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Result response
 */
@ApiModel(description = "Result response")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-03T17:44:37.086+01:00")
public class ResultResources {
  @SerializedName("streamLocations")
  private List<StreamLocation> streamLocations = null;

  public ResultResources streamLocations(List<StreamLocation> streamLocations) {
    this.streamLocations = streamLocations;
    return this;
  }

  public ResultResources addStreamLocationsItem(StreamLocation streamLocationsItem) {
    if (this.streamLocations == null) {
      this.streamLocations = new ArrayList<>();
    }
    this.streamLocations.add(streamLocationsItem);
    return this;
  }

   /**
   * Result Stream Locations
   * @return streamLocations
  **/
  @ApiModelProperty(value = "Result Stream Locations")
  public List<StreamLocation> getStreamLocations() {
    return streamLocations;
  }

  public void setStreamLocations(List<StreamLocation> streamLocations) {
    this.streamLocations = streamLocations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultResources resultResources = (ResultResources) o;
    return Objects.equals(this.streamLocations, resultResources.streamLocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamLocations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultResources {\n");
    
    sb.append("    streamLocations: ").append(toIndentedString(streamLocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

