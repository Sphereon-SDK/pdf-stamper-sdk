/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.pdf.stamper.model.Border;
import com.sphereon.sdk.pdf.stamper.model.CertificateSettings;
import com.sphereon.sdk.pdf.stamper.model.Connector;
import com.sphereon.sdk.pdf.stamper.model.Point;
import com.sphereon.sdk.pdf.stamper.model.StampComponent;
import com.sphereon.sdk.pdf.stamper.model.VisibleSignature;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.List;

/**
 * An invisible component that adds a PDF signature
 */
@ApiModel(description = "An invisible component that adds a PDF signature")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-12T10:33:42.564+01:00")
public class PdfSignatureComponent extends StampComponent {
  @SerializedName("reason")
  private String reason = null;

  @SerializedName("certificateSettings")
  private CertificateSettings certificateSettings = null;

  @SerializedName("visibleSignature")
  private VisibleSignature visibleSignature = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("location")
  private String location = null;

  /**
   * The signature mode to use. Only one certification (company/organization seal) can be used for a document and it has to be the first. Many approvals can be used
   */
  @JsonAdapter(SignatureModeEnum.Adapter.class)
  public enum SignatureModeEnum {
    CERTIFICATION("CERTIFICATION"),
    
    APPROVAL("APPROVAL");

    private String value;

    SignatureModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureModeEnum fromValue(String text) {
      for (SignatureModeEnum b : SignatureModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SignatureModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SignatureModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("signatureMode")
  private SignatureModeEnum signatureMode = null;

  public PdfSignatureComponent reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Reason (optional)
   * @return reason
  **/
  @ApiModelProperty(value = "Reason (optional)")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public PdfSignatureComponent certificateSettings(CertificateSettings certificateSettings) {
    this.certificateSettings = certificateSettings;
    return this;
  }

   /**
   * The optional certificate name, version and configuration to use for the signature. If not specified the Sphereon supplied certificate will be used
   * @return certificateSettings
  **/
  @ApiModelProperty(value = "The optional certificate name, version and configuration to use for the signature. If not specified the Sphereon supplied certificate will be used")
  public CertificateSettings getCertificateSettings() {
    return certificateSettings;
  }

  public void setCertificateSettings(CertificateSettings certificateSettings) {
    this.certificateSettings = certificateSettings;
  }

  public PdfSignatureComponent visibleSignature(VisibleSignature visibleSignature) {
    this.visibleSignature = visibleSignature;
    return this;
  }

   /**
   * Visible signature. If not specified, the signature will be invisible in the background
   * @return visibleSignature
  **/
  @ApiModelProperty(value = "Visible signature. If not specified, the signature will be invisible in the background")
  public VisibleSignature getVisibleSignature() {
    return visibleSignature;
  }

  public void setVisibleSignature(VisibleSignature visibleSignature) {
    this.visibleSignature = visibleSignature;
  }

  public PdfSignatureComponent name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name in the signature
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name in the signature")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PdfSignatureComponent location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Location (optional)
   * @return location
  **/
  @ApiModelProperty(value = "Location (optional)")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public PdfSignatureComponent signatureMode(SignatureModeEnum signatureMode) {
    this.signatureMode = signatureMode;
    return this;
  }

   /**
   * The signature mode to use. Only one certification (company/organization seal) can be used for a document and it has to be the first. Many approvals can be used
   * @return signatureMode
  **/
  @ApiModelProperty(required = true, value = "The signature mode to use. Only one certification (company/organization seal) can be used for a document and it has to be the first. Many approvals can be used")
  public SignatureModeEnum getSignatureMode() {
    return signatureMode;
  }

  public void setSignatureMode(SignatureModeEnum signatureMode) {
    this.signatureMode = signatureMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfSignatureComponent pdfSignatureComponent = (PdfSignatureComponent) o;
    return Objects.equals(this.reason, pdfSignatureComponent.reason) &&
        Objects.equals(this.certificateSettings, pdfSignatureComponent.certificateSettings) &&
        Objects.equals(this.visibleSignature, pdfSignatureComponent.visibleSignature) &&
        Objects.equals(this.name, pdfSignatureComponent.name) &&
        Objects.equals(this.location, pdfSignatureComponent.location) &&
        Objects.equals(this.signatureMode, pdfSignatureComponent.signatureMode) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reason, certificateSettings, visibleSignature, name, location, signatureMode, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfSignatureComponent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    certificateSettings: ").append(toIndentedString(certificateSettings)).append("\n");
    sb.append("    visibleSignature: ").append(toIndentedString(visibleSignature)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    signatureMode: ").append(toIndentedString(signatureMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

