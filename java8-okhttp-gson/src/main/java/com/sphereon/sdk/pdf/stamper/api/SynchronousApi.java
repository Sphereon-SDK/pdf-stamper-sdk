/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.api;

import com.sphereon.sdk.pdf.stamper.handler.ApiCallback;
import com.sphereon.sdk.pdf.stamper.handler.ApiClient;
import com.sphereon.sdk.pdf.stamper.handler.ApiException;
import com.sphereon.sdk.pdf.stamper.handler.ApiResponse;
import com.sphereon.sdk.pdf.stamper.handler.Configuration;
import com.sphereon.sdk.pdf.stamper.handler.Pair;
import com.sphereon.sdk.pdf.stamper.handler.ProgressRequestBody;
import com.sphereon.sdk.pdf.stamper.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sphereon.sdk.pdf.stamper.model.ContentRequest;
import com.sphereon.sdk.pdf.stamper.model.ContentResponse;
import com.sphereon.sdk.pdf.stamper.model.ErrorResponse;
import com.sphereon.sdk.pdf.stamper.model.PdfStamperJobRequest;
import com.sphereon.sdk.pdf.stamper.model.PdfStamperJobResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SynchronousApi {
    private ApiClient apiClient;

    public SynchronousApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SynchronousApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for syncJobContent
     * @param configId The PDF stamper configuration id (required)
     * @param contentRequest File content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call syncJobContentCall(String configId, ContentRequest contentRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = contentRequest;

        // create path and map variables
        String localVarPath = "/sync/streams/content"
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call syncJobContentValidateBeforeCall(String configId, ContentRequest contentRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling syncJobContent(Async)");
        }
        
        // verify the required parameter 'contentRequest' is set
        if (contentRequest == null) {
            throw new ApiException("Missing the required parameter 'contentRequest' when calling syncJobContent(Async)");
        }
        

        com.squareup.okhttp.Call call = syncJobContentCall(configId, contentRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Execute a synchronous stamp job with a content request/response.
     * Execute a synchronous stamp job using the given configId. Header parameters will be parsed for additional template variables.
     * @param configId The PDF stamper configuration id (required)
     * @param contentRequest File content (required)
     * @return ContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentResponse syncJobContent(String configId, ContentRequest contentRequest) throws ApiException {
        ApiResponse<ContentResponse> resp = syncJobContentWithHttpInfo(configId, contentRequest);
        return resp.getData();
    }

    /**
     * Execute a synchronous stamp job with a content request/response.
     * Execute a synchronous stamp job using the given configId. Header parameters will be parsed for additional template variables.
     * @param configId The PDF stamper configuration id (required)
     * @param contentRequest File content (required)
     * @return ApiResponse&lt;ContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentResponse> syncJobContentWithHttpInfo(String configId, ContentRequest contentRequest) throws ApiException {
        com.squareup.okhttp.Call call = syncJobContentValidateBeforeCall(configId, contentRequest, null, null);
        Type localVarReturnType = new TypeToken<ContentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute a synchronous stamp job with a content request/response. (asynchronously)
     * Execute a synchronous stamp job using the given configId. Header parameters will be parsed for additional template variables.
     * @param configId The PDF stamper configuration id (required)
     * @param contentRequest File content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncJobContentAsync(String configId, ContentRequest contentRequest, final ApiCallback<ContentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncJobContentValidateBeforeCall(configId, contentRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for syncJobStreamLocation
     * @param jobRequest Job request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call syncJobStreamLocationCall(PdfStamperJobRequest jobRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jobRequest;

        // create path and map variables
        String localVarPath = "/sync/streams/location";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call syncJobStreamLocationValidateBeforeCall(PdfStamperJobRequest jobRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobRequest' is set
        if (jobRequest == null) {
            throw new ApiException("Missing the required parameter 'jobRequest' when calling syncJobStreamLocation(Async)");
        }
        

        com.squareup.okhttp.Call call = syncJobStreamLocationCall(jobRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Execute a synchronous stamp job with a streamlocation.
     * Execute a synchronous stamp job using the given configId. Header parameters will be parsed for additional template variables.
     * @param jobRequest Job request (required)
     * @return PdfStamperJobResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PdfStamperJobResult syncJobStreamLocation(PdfStamperJobRequest jobRequest) throws ApiException {
        ApiResponse<PdfStamperJobResult> resp = syncJobStreamLocationWithHttpInfo(jobRequest);
        return resp.getData();
    }

    /**
     * Execute a synchronous stamp job with a streamlocation.
     * Execute a synchronous stamp job using the given configId. Header parameters will be parsed for additional template variables.
     * @param jobRequest Job request (required)
     * @return ApiResponse&lt;PdfStamperJobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PdfStamperJobResult> syncJobStreamLocationWithHttpInfo(PdfStamperJobRequest jobRequest) throws ApiException {
        com.squareup.okhttp.Call call = syncJobStreamLocationValidateBeforeCall(jobRequest, null, null);
        Type localVarReturnType = new TypeToken<PdfStamperJobResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute a synchronous stamp job with a streamlocation. (asynchronously)
     * Execute a synchronous stamp job using the given configId. Header parameters will be parsed for additional template variables.
     * @param jobRequest Job request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncJobStreamLocationAsync(PdfStamperJobRequest jobRequest, final ApiCallback<PdfStamperJobResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncJobStreamLocationValidateBeforeCall(jobRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PdfStamperJobResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
