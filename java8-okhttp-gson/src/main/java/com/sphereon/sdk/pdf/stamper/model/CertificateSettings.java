/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements. The API also supports digital signatures (blue bar), blockchain registrations and filling out forms    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The PDF Certificate signature settings
 */
@ApiModel(description = "The PDF Certificate signature settings")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-04-08T13:37:39.498+02:00")
public class CertificateSettings {
  @SerializedName("certificateVersion")
  private String certificateVersion = null;

  @SerializedName("cryptoKeysConfigName")
  private String cryptoKeysConfigName = null;

  @SerializedName("certificateName")
  private String certificateName = null;

  public CertificateSettings certificateVersion(String certificateVersion) {
    this.certificateVersion = certificateVersion;
    return this;
  }

   /**
   * The optional version of the certificate from the crypto-keys configuration to use. Can be the value &#39;latest&#39; to automatically use the latest version. The certificate (version) has to be present in the crypto-keys API
   * @return certificateVersion
  **/
  @ApiModelProperty(required = true, value = "The optional version of the certificate from the crypto-keys configuration to use. Can be the value 'latest' to automatically use the latest version. The certificate (version) has to be present in the crypto-keys API")
  public String getCertificateVersion() {
    return certificateVersion;
  }

  public void setCertificateVersion(String certificateVersion) {
    this.certificateVersion = certificateVersion;
  }

  public CertificateSettings cryptoKeysConfigName(String cryptoKeysConfigName) {
    this.cryptoKeysConfigName = cryptoKeysConfigName;
    return this;
  }

   /**
   * The Crypto Keys configuration name to use. The name has to be created in the crypto-keys API
   * @return cryptoKeysConfigName
  **/
  @ApiModelProperty(required = true, value = "The Crypto Keys configuration name to use. The name has to be created in the crypto-keys API")
  public String getCryptoKeysConfigName() {
    return cryptoKeysConfigName;
  }

  public void setCryptoKeysConfigName(String cryptoKeysConfigName) {
    this.cryptoKeysConfigName = cryptoKeysConfigName;
  }

  public CertificateSettings certificateName(String certificateName) {
    this.certificateName = certificateName;
    return this;
  }

   /**
   * The name of the certificate from the crypto-keys configuration to use. The certificate has to be present in the crypto-keys API
   * @return certificateName
  **/
  @ApiModelProperty(required = true, value = "The name of the certificate from the crypto-keys configuration to use. The certificate has to be present in the crypto-keys API")
  public String getCertificateName() {
    return certificateName;
  }

  public void setCertificateName(String certificateName) {
    this.certificateName = certificateName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateSettings certificateSettings = (CertificateSettings) o;
    return Objects.equals(this.certificateVersion, certificateSettings.certificateVersion) &&
        Objects.equals(this.cryptoKeysConfigName, certificateSettings.cryptoKeysConfigName) &&
        Objects.equals(this.certificateName, certificateSettings.certificateName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateVersion, cryptoKeysConfigName, certificateName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateSettings {\n");
    
    sb.append("    certificateVersion: ").append(toIndentedString(certificateVersion)).append("\n");
    sb.append("    cryptoKeysConfigName: ").append(toIndentedString(cryptoKeysConfigName)).append("\n");
    sb.append("    certificateName: ").append(toIndentedString(certificateName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

