/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/0.2  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.pdf.stamper.model.RGBValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * A color object
 */
@ApiModel(description = "A color object")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-03T17:44:37.086+01:00")
public class Color {
  /**
   * Use one of the common predefined colors
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    BLACK("BLACK"),
    
    WHITE("WHITE"),
    
    RED("RED"),
    
    GREEN("GREEN"),
    
    BLUE("BLUE"),
    
    YELLOW("YELLOW"),
    
    CYAN("CYAN"),
    
    MAGENTA("MAGENTA"),
    
    PINK("PINK"),
    
    GRAY("GRAY"),
    
    DARK_GRAY("DARK_GRAY"),
    
    LIGHT_GRAY("LIGHT_GRAY"),
    
    ORANGE("ORANGE");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String text) {
      for (NameEnum b : NameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NameEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("name")
  private NameEnum name = null;

  @SerializedName("rgbValue")
  private RGBValue rgbValue = null;

  public Color name(NameEnum name) {
    this.name = name;
    return this;
  }

   /**
   * Use one of the common predefined colors
   * @return name
  **/
  @ApiModelProperty(value = "Use one of the common predefined colors")
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }

  public Color rgbValue(RGBValue rgbValue) {
    this.rgbValue = rgbValue;
    return this;
  }

   /**
   * Use a color that is composed out of the red, green and blue values
   * @return rgbValue
  **/
  @ApiModelProperty(value = "Use a color that is composed out of the red, green and blue values")
  public RGBValue getRgbValue() {
    return rgbValue;
  }

  public void setRgbValue(RGBValue rgbValue) {
    this.rgbValue = rgbValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Color color = (Color) o;
    return Objects.equals(this.name, color.name) &&
        Objects.equals(this.rgbValue, color.rgbValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, rgbValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Color {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rgbValue: ").append(toIndentedString(rgbValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

