/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/0.2  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.pdf.stamper.model.InputSettings;
import com.sphereon.sdk.pdf.stamper.model.Lifecycle;
import com.sphereon.sdk.pdf.stamper.model.PdfStamperConfig;
import com.sphereon.sdk.pdf.stamper.model.ResultSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * PDF stamper job settings
 */
@ApiModel(description = "PDF stamper job settings")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-03T17:44:37.086+01:00")
public class PdfStamperJobSettings {
  @SerializedName("useConfiguration")
  private List<String> useConfiguration = null;

  @SerializedName("variables")
  private Map<String, String> variables = null;

  @SerializedName("resultSettings")
  private ResultSettings resultSettings = null;

  @SerializedName("configuration")
  private PdfStamperConfig _configuration = null;

  @SerializedName("inputSettings")
  private InputSettings inputSettings = null;

  @SerializedName("jobLifecycle")
  private Lifecycle jobLifecycle = null;

  public PdfStamperJobSettings useConfiguration(List<String> useConfiguration) {
    this.useConfiguration = useConfiguration;
    return this;
  }

  public PdfStamperJobSettings addUseConfigurationItem(String useConfigurationItem) {
    if (this.useConfiguration == null) {
      this.useConfiguration = new ArrayList<>();
    }
    this.useConfiguration.add(useConfigurationItem);
    return this;
  }

   /**
   * A list of configuration ids that have to be applied during executing the job.
   * @return useConfiguration
  **/
  @ApiModelProperty(value = "A list of configuration ids that have to be applied during executing the job.")
  public List<String> getUseConfiguration() {
    return useConfiguration;
  }

  public void setUseConfiguration(List<String> useConfiguration) {
    this.useConfiguration = useConfiguration;
  }

  public PdfStamperJobSettings variables(Map<String, String> variables) {
    this.variables = variables;
    return this;
  }

  public PdfStamperJobSettings putVariablesItem(String key, String variablesItem) {
    if (this.variables == null) {
      this.variables = new HashMap<>();
    }
    this.variables.put(key, variablesItem);
    return this;
  }

   /**
   * A map with key-values used to replace template variables in components.
   * @return variables
  **/
  @ApiModelProperty(value = "A map with key-values used to replace template variables in components.")
  public Map<String, String> getVariables() {
    return variables;
  }

  public void setVariables(Map<String, String> variables) {
    this.variables = variables;
  }

  public PdfStamperJobSettings resultSettings(ResultSettings resultSettings) {
    this.resultSettings = resultSettings;
    return this;
  }

   /**
   * The result file and lifecycle settings
   * @return resultSettings
  **/
  @ApiModelProperty(value = "The result file and lifecycle settings")
  public ResultSettings getResultSettings() {
    return resultSettings;
  }

  public void setResultSettings(ResultSettings resultSettings) {
    this.resultSettings = resultSettings;
  }

  public PdfStamperJobSettings _configuration(PdfStamperConfig _configuration) {
    this._configuration = _configuration;
    return this;
  }

   /**
   * A configuration that only applies for one job without the ability to be reused.
   * @return _configuration
  **/
  @ApiModelProperty(value = "A configuration that only applies for one job without the ability to be reused.")
  public PdfStamperConfig getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(PdfStamperConfig _configuration) {
    this._configuration = _configuration;
  }

  public PdfStamperJobSettings inputSettings(InputSettings inputSettings) {
    this.inputSettings = inputSettings;
    return this;
  }

   /**
   * The input file and lifecycle settings
   * @return inputSettings
  **/
  @ApiModelProperty(value = "The input file and lifecycle settings")
  public InputSettings getInputSettings() {
    return inputSettings;
  }

  public void setInputSettings(InputSettings inputSettings) {
    this.inputSettings = inputSettings;
  }

  public PdfStamperJobSettings jobLifecycle(Lifecycle jobLifecycle) {
    this.jobLifecycle = jobLifecycle;
    return this;
  }

   /**
   * The lifecycle of the job itself
   * @return jobLifecycle
  **/
  @ApiModelProperty(value = "The lifecycle of the job itself")
  public Lifecycle getJobLifecycle() {
    return jobLifecycle;
  }

  public void setJobLifecycle(Lifecycle jobLifecycle) {
    this.jobLifecycle = jobLifecycle;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfStamperJobSettings pdfStamperJobSettings = (PdfStamperJobSettings) o;
    return Objects.equals(this.useConfiguration, pdfStamperJobSettings.useConfiguration) &&
        Objects.equals(this.variables, pdfStamperJobSettings.variables) &&
        Objects.equals(this.resultSettings, pdfStamperJobSettings.resultSettings) &&
        Objects.equals(this._configuration, pdfStamperJobSettings._configuration) &&
        Objects.equals(this.inputSettings, pdfStamperJobSettings.inputSettings) &&
        Objects.equals(this.jobLifecycle, pdfStamperJobSettings.jobLifecycle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useConfiguration, variables, resultSettings, _configuration, inputSettings, jobLifecycle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfStamperJobSettings {\n");
    
    sb.append("    useConfiguration: ").append(toIndentedString(useConfiguration)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    resultSettings: ").append(toIndentedString(resultSettings)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    inputSettings: ").append(toIndentedString(inputSettings)).append("\n");
    sb.append("    jobLifecycle: ").append(toIndentedString(jobLifecycle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

