/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.pdf.stamper.model.Border;
import com.sphereon.sdk.pdf.stamper.model.Connector;
import com.sphereon.sdk.pdf.stamper.model.Point;
import com.sphereon.sdk.pdf.stamper.model.StampComponent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.List;
import org.apache.commons.lang3.StringUtils;

/**
 * A barcode component to stamp a barcode or QR code on a pdf
 */
@ApiModel(description = "A barcode component to stamp a barcode or QR code on a pdf")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-09T08:19:21.333Z")
public class BarcodeComponent extends StampComponent {
  /**
   * Specifies what degree of error correction to use, for example in QR Codes, See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels defined by the QR code standard
   */
  @JsonAdapter(ErrorCorrectionLevelEnum.Adapter.class)
  public enum ErrorCorrectionLevelEnum {
    L("QR_L"),

    M("QR_M"),

    Q("QR_Q"),

    H("QR_H");

    private String value;

    ErrorCorrectionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorCorrectionLevelEnum fromValue(String text) {
      for (ErrorCorrectionLevelEnum b : ErrorCorrectionLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ErrorCorrectionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorCorrectionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorCorrectionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ErrorCorrectionLevelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("errorCorrectionLevel")
  private ErrorCorrectionLevelEnum errorCorrectionLevel = null;

  /**
   * The barcode format to generate
   */
  @JsonAdapter(BarcodeFormatEnum.Adapter.class)
  public enum BarcodeFormatEnum {
    AZTEC("AZTEC"),

    CODABAR("CODABAR"),

    CODE_39("CODE_39"),

    CODE_93("CODE_93"),

    CODE_128("CODE_128"),

    DATA_MATRIX("DATA_MATRIX"),

    EAN_8("EAN_8"),

    EAN_13("EAN_13"),

    ITF("ITF"),

    MAXICODE("MAXICODE"),

    PDF_417("PDF_417"),

    QR_CODE("QR_CODE"),

    RSS_14("RSS_14"),

    RSS_EXPANDED("RSS_EXPANDED"),

    UPC_A("UPC_A"),

    UPC_E("UPC_E"),

    UPC_EAN_EXTENSION("UPC_EAN_EXTENSION");

    private String value;

    BarcodeFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BarcodeFormatEnum fromValue(String text) {
      for (BarcodeFormatEnum b : BarcodeFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BarcodeFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BarcodeFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BarcodeFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BarcodeFormatEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("barcodeFormat")
  private BarcodeFormatEnum barcodeFormat = null;

  @SerializedName("width")
  private Integer width = null;

  @SerializedName("content")
  private String content = null;

  @SerializedName("height")
  private Integer height = null;

  @SerializedName("qrVersion")
  private Integer qrVersion = null;

  public BarcodeComponent() {
    super(StampType.BARCODECOMPONENT.name());
  }

  public BarcodeComponent errorCorrectionLevel(ErrorCorrectionLevelEnum errorCorrectionLevel) {
    this.errorCorrectionLevel = errorCorrectionLevel;
    return this;
  }

   /**
   * Specifies what degree of error correction to use, for example in QR Codes, See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels defined by the QR code standard
   * @return errorCorrectionLevel
  **/
  @ApiModelProperty(value = "Specifies what degree of error correction to use, for example in QR Codes, See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels defined by the QR code standard")
  public ErrorCorrectionLevelEnum getErrorCorrectionLevel() {
    return errorCorrectionLevel;
  }

  public void setErrorCorrectionLevel(ErrorCorrectionLevelEnum errorCorrectionLevel) {
    this.errorCorrectionLevel = errorCorrectionLevel;
  }

  public BarcodeComponent barcodeFormat(BarcodeFormatEnum barcodeFormat) {
    this.barcodeFormat = barcodeFormat;
    return this;
  }

   /**
   * The barcode format to generate
   * @return barcodeFormat
  **/
  @ApiModelProperty(required = true, value = "The barcode format to generate")
  public BarcodeFormatEnum getBarcodeFormat() {
    return barcodeFormat;
  }

  public void setBarcodeFormat(BarcodeFormatEnum barcodeFormat) {
    this.barcodeFormat = barcodeFormat;
  }

  public BarcodeComponent width(Integer width) {
    this.width = width;
    return this;
  }

   /**
   * The preferred width in pixels
   * @return width
  **/
  @ApiModelProperty(required = true, value = "The preferred width in pixels")
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }

  public BarcodeComponent content(String content) {
    this.content = content;
    return this;
  }

   /**
   * The contents to encode in the barcode
   * @return content
  **/
  @ApiModelProperty(required = true, value = "The contents to encode in the barcode")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public BarcodeComponent height(Integer height) {
    this.height = height;
    return this;
  }

   /**
   * The preferred height in pixels
   * @return height
  **/
  @ApiModelProperty(required = true, value = "The preferred height in pixels")
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }

  public BarcodeComponent qrVersion(Integer qrVersion) {
    this.qrVersion = qrVersion;
    return this;
  }

   /**
   * Get qrVersion
   * @return qrVersion
  **/
  @ApiModelProperty(value = "")
  public Integer getQrVersion() {
    return qrVersion;
  }

  public void setQrVersion(Integer qrVersion) {
    this.qrVersion = qrVersion;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BarcodeComponent barcodeComponent = (BarcodeComponent) o;
    return Objects.equals(this.errorCorrectionLevel, barcodeComponent.errorCorrectionLevel) &&
        Objects.equals(this.barcodeFormat, barcodeComponent.barcodeFormat) &&
        Objects.equals(this.width, barcodeComponent.width) &&
        Objects.equals(this.content, barcodeComponent.content) &&
        Objects.equals(this.height, barcodeComponent.height) &&
        Objects.equals(this.qrVersion, barcodeComponent.qrVersion) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorCorrectionLevel, barcodeFormat, width, content, height, qrVersion, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BarcodeComponent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    errorCorrectionLevel: ").append(toIndentedString(errorCorrectionLevel)).append("\n");
    sb.append("    barcodeFormat: ").append(toIndentedString(barcodeFormat)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    qrVersion: ").append(toIndentedString(qrVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  @Override
  public void validate() {
    if (StringUtils.isEmpty(content)) {
      throw new IllegalArgumentException("barcode component requires content");
    } else if (width < 1 || height < 1) {
      throw new IllegalArgumentException(String.format("barcode component dimensions (%s,%s) should both be greater than 0", width, height));
    } else if (barcodeFormat == null) {
      throw new IllegalArgumentException("barcode component requires barcodeFormat");
    }
  }

}

