/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Content request
 */
@ApiModel(description = "Content request")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-12T10:33:42.564+01:00")
public class ContentRequest {
  @SerializedName("variables")
  private Map<String, String> variables = null;

  @SerializedName("filename")
  private String filename = null;

  @SerializedName("configIds")
  private List<String> configIds = new ArrayList<>();

  @SerializedName("formFields")
  private Map<String, String> formFields = null;

  @SerializedName("content")
  private String content = null;

  public ContentRequest variables(Map<String, String> variables) {
    this.variables = variables;
    return this;
  }

  public ContentRequest putVariablesItem(String key, String variablesItem) {
    if (this.variables == null) {
      this.variables = new HashMap<>();
    }
    this.variables.put(key, variablesItem);
    return this;
  }

   /**
   * A map with key-values used to replace template variables in components.
   * @return variables
  **/
  @ApiModelProperty(value = "A map with key-values used to replace template variables in components.")
  public Map<String, String> getVariables() {
    return variables;
  }

  public void setVariables(Map<String, String> variables) {
    this.variables = variables;
  }

  public ContentRequest filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * The filename
   * @return filename
  **/
  @ApiModelProperty(required = true, value = "The filename")
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }

  public ContentRequest configIds(List<String> configIds) {
    this.configIds = configIds;
    return this;
  }

  public ContentRequest addConfigIdsItem(String configIdsItem) {
    this.configIds.add(configIdsItem);
    return this;
  }

   /**
   * A list of configuration ids that have to be applied during executing the job.
   * @return configIds
  **/
  @ApiModelProperty(required = true, value = "A list of configuration ids that have to be applied during executing the job.")
  public List<String> getConfigIds() {
    return configIds;
  }

  public void setConfigIds(List<String> configIds) {
    this.configIds = configIds;
  }

  public ContentRequest formFields(Map<String, String> formFields) {
    this.formFields = formFields;
    return this;
  }

  public ContentRequest putFormFieldsItem(String key, String formFieldsItem) {
    if (this.formFields == null) {
      this.formFields = new HashMap<>();
    }
    this.formFields.put(key, formFieldsItem);
    return this;
  }

   /**
   * A map with key-values used to fill out PDF forms. Please note that this is different from using variables. Variables are used in texts, hyperlinks and barcodes
   * @return formFields
  **/
  @ApiModelProperty(value = "A map with key-values used to fill out PDF forms. Please note that this is different from using variables. Variables are used in texts, hyperlinks and barcodes")
  public Map<String, String> getFormFields() {
    return formFields;
  }

  public void setFormFields(Map<String, String> formFields) {
    this.formFields = formFields;
  }

  public ContentRequest content(String content) {
    this.content = content;
    return this;
  }

   /**
   * The file as a base64 encoded string
   * @return content
  **/
  @ApiModelProperty(required = true, value = "The file as a base64 encoded string")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentRequest contentRequest = (ContentRequest) o;
    return Objects.equals(this.variables, contentRequest.variables) &&
        Objects.equals(this.filename, contentRequest.filename) &&
        Objects.equals(this.configIds, contentRequest.configIds) &&
        Objects.equals(this.formFields, contentRequest.formFields) &&
        Objects.equals(this.content, contentRequest.content);
  }

  @Override
  public int hashCode() {
    return Objects.hash(variables, filename, configIds, formFields, content);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentRequest {\n");
    
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    configIds: ").append(toIndentedString(configIds)).append("\n");
    sb.append("    formFields: ").append(toIndentedString(formFields)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

