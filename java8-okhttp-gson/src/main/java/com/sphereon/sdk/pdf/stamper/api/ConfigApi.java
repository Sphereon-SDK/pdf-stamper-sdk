/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/0.2  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.api;

import com.sphereon.sdk.pdf.stamper.handler.ApiCallback;
import com.sphereon.sdk.pdf.stamper.handler.ApiClient;
import com.sphereon.sdk.pdf.stamper.handler.ApiException;
import com.sphereon.sdk.pdf.stamper.handler.ApiResponse;
import com.sphereon.sdk.pdf.stamper.handler.Configuration;
import com.sphereon.sdk.pdf.stamper.handler.Pair;
import com.sphereon.sdk.pdf.stamper.handler.ProgressRequestBody;
import com.sphereon.sdk.pdf.stamper.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.sphereon.sdk.pdf.stamper.model.PdfStamperConfig;
import com.sphereon.sdk.pdf.stamper.model.PdfStamperConfigContainer;
import com.sphereon.sdk.pdf.stamper.model.StreamLocation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigApi {
    private ApiClient apiClient;

    public ConfigApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createConfiguration
     * @param pdfStamperConfiguration The PDF stamper configuration (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createConfigurationCall(PdfStamperConfig pdfStamperConfiguration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pdfStamperConfiguration;

        // create path and map variables
        String localVarPath = "/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createConfigurationValidateBeforeCall(PdfStamperConfig pdfStamperConfiguration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pdfStamperConfiguration' is set
        if (pdfStamperConfiguration == null) {
            throw new ApiException("Missing the required parameter 'pdfStamperConfiguration' when calling createConfiguration(Async)");
        }
        

        com.squareup.okhttp.Call call = createConfigurationCall(pdfStamperConfiguration, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create PDF stamper configuration
     * Create / initialize a new PDF stamper configuration.
     * @param pdfStamperConfiguration The PDF stamper configuration (required)
     * @return PdfStamperConfigContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PdfStamperConfigContainer createConfiguration(PdfStamperConfig pdfStamperConfiguration) throws ApiException {
        ApiResponse<PdfStamperConfigContainer> resp = createConfigurationWithHttpInfo(pdfStamperConfiguration);
        return resp.getData();
    }

    /**
     * Create PDF stamper configuration
     * Create / initialize a new PDF stamper configuration.
     * @param pdfStamperConfiguration The PDF stamper configuration (required)
     * @return ApiResponse&lt;PdfStamperConfigContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PdfStamperConfigContainer> createConfigurationWithHttpInfo(PdfStamperConfig pdfStamperConfiguration) throws ApiException {
        com.squareup.okhttp.Call call = createConfigurationValidateBeforeCall(pdfStamperConfiguration, null, null);
        Type localVarReturnType = new TypeToken<PdfStamperConfigContainer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create PDF stamper configuration (asynchronously)
     * Create / initialize a new PDF stamper configuration.
     * @param pdfStamperConfiguration The PDF stamper configuration (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createConfigurationAsync(PdfStamperConfig pdfStamperConfiguration, final ApiCallback<PdfStamperConfigContainer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createConfigurationValidateBeforeCall(pdfStamperConfiguration, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PdfStamperConfigContainer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteConfiguration
     * @param configId The PDF stamper configuration id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteConfigurationCall(String configId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/{configId}"
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteConfigurationValidateBeforeCall(String configId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling deleteConfiguration(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteConfigurationCall(configId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete PDF stamper configuration
     * Delete a PDF stamper configuration.
     * @param configId The PDF stamper configuration id (required)
     * @return PdfStamperConfigContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PdfStamperConfigContainer deleteConfiguration(String configId) throws ApiException {
        ApiResponse<PdfStamperConfigContainer> resp = deleteConfigurationWithHttpInfo(configId);
        return resp.getData();
    }

    /**
     * Delete PDF stamper configuration
     * Delete a PDF stamper configuration.
     * @param configId The PDF stamper configuration id (required)
     * @return ApiResponse&lt;PdfStamperConfigContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PdfStamperConfigContainer> deleteConfigurationWithHttpInfo(String configId) throws ApiException {
        com.squareup.okhttp.Call call = deleteConfigurationValidateBeforeCall(configId, null, null);
        Type localVarReturnType = new TypeToken<PdfStamperConfigContainer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete PDF stamper configuration (asynchronously)
     * Delete a PDF stamper configuration.
     * @param configId The PDF stamper configuration id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteConfigurationAsync(String configId, final ApiCallback<PdfStamperConfigContainer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteConfigurationValidateBeforeCall(configId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PdfStamperConfigContainer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteResources
     * @param configId The PDF stamper configuration id (required)
     * @param streamLocations The resource locations in storage (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteResourcesCall(String configId, List<StreamLocation> streamLocations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamLocations;

        // create path and map variables
        String localVarPath = "/config/{configId}/streams"
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteResourcesValidateBeforeCall(String configId, List<StreamLocation> streamLocations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling deleteResources(Async)");
        }
        
        // verify the required parameter 'streamLocations' is set
        if (streamLocations == null) {
            throw new ApiException("Missing the required parameter 'streamLocations' when calling deleteResources(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteResourcesCall(configId, streamLocations, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete resources
     * Delete resources referenced by a configuration.
     * @param configId The PDF stamper configuration id (required)
     * @param streamLocations The resource locations in storage (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteResources(String configId, List<StreamLocation> streamLocations) throws ApiException {
        deleteResourcesWithHttpInfo(configId, streamLocations);
    }

    /**
     * Delete resources
     * Delete resources referenced by a configuration.
     * @param configId The PDF stamper configuration id (required)
     * @param streamLocations The resource locations in storage (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteResourcesWithHttpInfo(String configId, List<StreamLocation> streamLocations) throws ApiException {
        com.squareup.okhttp.Call call = deleteResourcesValidateBeforeCall(configId, streamLocations, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete resources (asynchronously)
     * Delete resources referenced by a configuration.
     * @param configId The PDF stamper configuration id (required)
     * @param streamLocations The resource locations in storage (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteResourcesAsync(String configId, List<StreamLocation> streamLocations, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteResourcesValidateBeforeCall(configId, streamLocations, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getConfiguration
     * @param configId The PDF stamper configuration id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConfigurationCall(String configId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/{configId}"
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConfigurationValidateBeforeCall(String configId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling getConfiguration(Async)");
        }
        

        com.squareup.okhttp.Call call = getConfigurationCall(configId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get PDF stamper configuration
     * Retrieve a PDF stamper configuration.
     * @param configId The PDF stamper configuration id (required)
     * @return PdfStamperConfigContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PdfStamperConfigContainer getConfiguration(String configId) throws ApiException {
        ApiResponse<PdfStamperConfigContainer> resp = getConfigurationWithHttpInfo(configId);
        return resp.getData();
    }

    /**
     * Get PDF stamper configuration
     * Retrieve a PDF stamper configuration.
     * @param configId The PDF stamper configuration id (required)
     * @return ApiResponse&lt;PdfStamperConfigContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PdfStamperConfigContainer> getConfigurationWithHttpInfo(String configId) throws ApiException {
        com.squareup.okhttp.Call call = getConfigurationValidateBeforeCall(configId, null, null);
        Type localVarReturnType = new TypeToken<PdfStamperConfigContainer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get PDF stamper configuration (asynchronously)
     * Retrieve a PDF stamper configuration.
     * @param configId The PDF stamper configuration id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConfigurationAsync(String configId, final ApiCallback<PdfStamperConfigContainer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConfigurationValidateBeforeCall(configId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PdfStamperConfigContainer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateConfiguration
     * @param configId The PDF stamper configuration id (required)
     * @param pdfStamperConfiguration The PDF stamper configuration (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateConfigurationCall(String configId, PdfStamperConfig pdfStamperConfiguration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pdfStamperConfiguration;

        // create path and map variables
        String localVarPath = "/config/{configId}"
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateConfigurationValidateBeforeCall(String configId, PdfStamperConfig pdfStamperConfiguration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling updateConfiguration(Async)");
        }
        
        // verify the required parameter 'pdfStamperConfiguration' is set
        if (pdfStamperConfiguration == null) {
            throw new ApiException("Missing the required parameter 'pdfStamperConfiguration' when calling updateConfiguration(Async)");
        }
        

        com.squareup.okhttp.Call call = updateConfigurationCall(configId, pdfStamperConfiguration, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update PDF stamper configuration
     * Update an existing PDF stamper configuration.
     * @param configId The PDF stamper configuration id (required)
     * @param pdfStamperConfiguration The PDF stamper configuration (required)
     * @return PdfStamperConfigContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PdfStamperConfigContainer updateConfiguration(String configId, PdfStamperConfig pdfStamperConfiguration) throws ApiException {
        ApiResponse<PdfStamperConfigContainer> resp = updateConfigurationWithHttpInfo(configId, pdfStamperConfiguration);
        return resp.getData();
    }

    /**
     * Update PDF stamper configuration
     * Update an existing PDF stamper configuration.
     * @param configId The PDF stamper configuration id (required)
     * @param pdfStamperConfiguration The PDF stamper configuration (required)
     * @return ApiResponse&lt;PdfStamperConfigContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PdfStamperConfigContainer> updateConfigurationWithHttpInfo(String configId, PdfStamperConfig pdfStamperConfiguration) throws ApiException {
        com.squareup.okhttp.Call call = updateConfigurationValidateBeforeCall(configId, pdfStamperConfiguration, null, null);
        Type localVarReturnType = new TypeToken<PdfStamperConfigContainer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update PDF stamper configuration (asynchronously)
     * Update an existing PDF stamper configuration.
     * @param configId The PDF stamper configuration id (required)
     * @param pdfStamperConfiguration The PDF stamper configuration (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateConfigurationAsync(String configId, PdfStamperConfig pdfStamperConfiguration, final ApiCallback<PdfStamperConfigContainer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateConfigurationValidateBeforeCall(configId, pdfStamperConfiguration, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PdfStamperConfigContainer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadResource
     * @param configId configId (required)
     * @param stream The resource data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadResourceCall(String configId, File stream, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/{configId}/streams/multipart"
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stream != null)
        localVarFormParams.put("stream", stream);

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadResourceValidateBeforeCall(String configId, File stream, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling uploadResource(Async)");
        }
        
        // verify the required parameter 'stream' is set
        if (stream == null) {
            throw new ApiException("Missing the required parameter 'stream' when calling uploadResource(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadResourceCall(configId, stream, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload resource
     * Upload a resource needed by a configuration.
     * @param configId configId (required)
     * @param stream The resource data (required)
     * @return StreamLocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamLocation uploadResource(String configId, File stream) throws ApiException {
        ApiResponse<StreamLocation> resp = uploadResourceWithHttpInfo(configId, stream);
        return resp.getData();
    }

    /**
     * Upload resource
     * Upload a resource needed by a configuration.
     * @param configId configId (required)
     * @param stream The resource data (required)
     * @return ApiResponse&lt;StreamLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamLocation> uploadResourceWithHttpInfo(String configId, File stream) throws ApiException {
        com.squareup.okhttp.Call call = uploadResourceValidateBeforeCall(configId, stream, null, null);
        Type localVarReturnType = new TypeToken<StreamLocation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload resource (asynchronously)
     * Upload a resource needed by a configuration.
     * @param configId configId (required)
     * @param stream The resource data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadResourceAsync(String configId, File stream, final ApiCallback<StreamLocation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadResourceValidateBeforeCall(configId, stream, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamLocation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
