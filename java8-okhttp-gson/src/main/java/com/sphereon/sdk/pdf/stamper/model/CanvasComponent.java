/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf/stamp/0.2/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.pdf.stamper.model.Border;
import com.sphereon.sdk.pdf.stamper.model.Connector;
import com.sphereon.sdk.pdf.stamper.model.Point;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A canvas space interconnecting zones on the page to stamp components
 */
@ApiModel(description = "A canvas space interconnecting zones on the page to stamp components")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-28T10:42:07.737+02:00")
public class CanvasComponent {
  @SerializedName("border")
  private Border border = null;

  @SerializedName("specificPages")
  private List<Integer> specificPages = null;

  @SerializedName("connectors")
  private List<Connector> connectors = null;

  /**
   * Prescribes the page the component needs to be overlay-ed
   */
  @JsonAdapter(PageSelectorEnum.Adapter.class)
  public enum PageSelectorEnum {
    FIRST_PAGE("FIRST_PAGE"),
    
    LAST_PAGE("LAST_PAGE"),
    
    EVEN_PAGES("EVEN_PAGES"),
    
    ODD_PAGES("ODD_PAGES"),
    
    ALL_PAGES("ALL_PAGES"),
    
    SPECIFIC_PAGES("SPECIFIC_PAGES");

    private String value;

    PageSelectorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PageSelectorEnum fromValue(String text) {
      for (PageSelectorEnum b : PageSelectorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PageSelectorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PageSelectorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PageSelectorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PageSelectorEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("pageSelector")
  private PageSelectorEnum pageSelector = null;

  @SerializedName("offset")
  private Point offset = null;

  /**
   * The operation that should be executed with the stamp component
   */
  @JsonAdapter(PageOperationEnum.Adapter.class)
  public enum PageOperationEnum {
    STAMP("STAMP");

    private String value;

    PageOperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PageOperationEnum fromValue(String text) {
      for (PageOperationEnum b : PageOperationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PageOperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PageOperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PageOperationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PageOperationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("pageOperation")
  private PageOperationEnum pageOperation = null;

  @SerializedName("type")
  private String type = null;

  public CanvasComponent border(Border border) {
    this.border = border;
    return this;
  }

   /**
   * The border of the component
   * @return border
  **/
  @ApiModelProperty(value = "The border of the component")
  public Border getBorder() {
    return border;
  }

  public void setBorder(Border border) {
    this.border = border;
  }

  public CanvasComponent specificPages(List<Integer> specificPages) {
    this.specificPages = specificPages;
    return this;
  }

  public CanvasComponent addSpecificPagesItem(Integer specificPagesItem) {
    if (this.specificPages == null) {
      this.specificPages = new ArrayList<>();
    }
    this.specificPages.add(specificPagesItem);
    return this;
  }

   /**
   * Get specificPages
   * @return specificPages
  **/
  @ApiModelProperty(value = "")
  public List<Integer> getSpecificPages() {
    return specificPages;
  }

  public void setSpecificPages(List<Integer> specificPages) {
    this.specificPages = specificPages;
  }

  public CanvasComponent connectors(List<Connector> connectors) {
    this.connectors = connectors;
    return this;
  }

  public CanvasComponent addConnectorsItem(Connector connectorsItem) {
    if (this.connectors == null) {
      this.connectors = new ArrayList<>();
    }
    this.connectors.add(connectorsItem);
    return this;
  }

   /**
   * Connectors containing components that can be positioned relative to this component
   * @return connectors
  **/
  @ApiModelProperty(value = "Connectors containing components that can be positioned relative to this component")
  public List<Connector> getConnectors() {
    return connectors;
  }

  public void setConnectors(List<Connector> connectors) {
    this.connectors = connectors;
  }

  public CanvasComponent pageSelector(PageSelectorEnum pageSelector) {
    this.pageSelector = pageSelector;
    return this;
  }

   /**
   * Prescribes the page the component needs to be overlay-ed
   * @return pageSelector
  **/
  @ApiModelProperty(required = true, value = "Prescribes the page the component needs to be overlay-ed")
  public PageSelectorEnum getPageSelector() {
    return pageSelector;
  }

  public void setPageSelector(PageSelectorEnum pageSelector) {
    this.pageSelector = pageSelector;
  }

  public CanvasComponent offset(Point offset) {
    this.offset = offset;
    return this;
  }

   /**
   * The offset of the component relative to the parent component
   * @return offset
  **/
  @ApiModelProperty(value = "The offset of the component relative to the parent component")
  public Point getOffset() {
    return offset;
  }

  public void setOffset(Point offset) {
    this.offset = offset;
  }

  public CanvasComponent pageOperation(PageOperationEnum pageOperation) {
    this.pageOperation = pageOperation;
    return this;
  }

   /**
   * The operation that should be executed with the stamp component
   * @return pageOperation
  **/
  @ApiModelProperty(required = true, value = "The operation that should be executed with the stamp component")
  public PageOperationEnum getPageOperation() {
    return pageOperation;
  }

  public void setPageOperation(PageOperationEnum pageOperation) {
    this.pageOperation = pageOperation;
  }

  public CanvasComponent type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The discriminator type for serialization of the different components
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The discriminator type for serialization of the different components")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CanvasComponent canvasComponent = (CanvasComponent) o;
    return Objects.equals(this.border, canvasComponent.border) &&
        Objects.equals(this.specificPages, canvasComponent.specificPages) &&
        Objects.equals(this.connectors, canvasComponent.connectors) &&
        Objects.equals(this.pageSelector, canvasComponent.pageSelector) &&
        Objects.equals(this.offset, canvasComponent.offset) &&
        Objects.equals(this.pageOperation, canvasComponent.pageOperation) &&
        Objects.equals(this.type, canvasComponent.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(border, specificPages, connectors, pageSelector, offset, pageOperation, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CanvasComponent {\n");
    
    sb.append("    border: ").append(toIndentedString(border)).append("\n");
    sb.append("    specificPages: ").append(toIndentedString(specificPages)).append("\n");
    sb.append("    connectors: ").append(toIndentedString(connectors)).append("\n");
    sb.append("    pageSelector: ").append(toIndentedString(pageSelector)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    pageOperation: ").append(toIndentedString(pageOperation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

