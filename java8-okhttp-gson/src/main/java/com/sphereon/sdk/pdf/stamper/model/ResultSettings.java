/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.pdf.stamper.model.Lifecycle;
import com.sphereon.sdk.pdf.stamper.model.StorageLocation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Result settings
 */
@ApiModel(description = "Result settings")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-27T02:48:32.481+01:00")
public class ResultSettings {
  /**
   * Storage mode. Can be a configured storage location on the storage API, a job id folder in the supplied storage location or completely replacing the input files (streamlocations).
   */
  @JsonAdapter(StorageModeEnum.Adapter.class)
  public enum StorageModeEnum {
    STORAGE_LOCATION("STORAGE_LOCATION"),
    
    STORAGE_LOCATION_JOB_IDS("STORAGE_LOCATION_JOB_IDS"),
    
    REPLACE_INPUT("REPLACE_INPUT");

    private String value;

    StorageModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageModeEnum fromValue(String text) {
      for (StorageModeEnum b : StorageModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StorageModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StorageModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("storageMode")
  private StorageModeEnum storageMode = null;

  @SerializedName("storageLocation")
  private StorageLocation storageLocation = null;

  @SerializedName("lifecycles")
  private List<Lifecycle> lifecycles = null;

  public ResultSettings storageMode(StorageModeEnum storageMode) {
    this.storageMode = storageMode;
    return this;
  }

   /**
   * Storage mode. Can be a configured storage location on the storage API, a job id folder in the supplied storage location or completely replacing the input files (streamlocations).
   * @return storageMode
  **/
  @ApiModelProperty(required = true, value = "Storage mode. Can be a configured storage location on the storage API, a job id folder in the supplied storage location or completely replacing the input files (streamlocations).")
  public StorageModeEnum getStorageMode() {
    return storageMode;
  }

  public void setStorageMode(StorageModeEnum storageMode) {
    this.storageMode = storageMode;
  }

  public ResultSettings storageLocation(StorageLocation storageLocation) {
    this.storageLocation = storageLocation;
    return this;
  }

   /**
   * Result Storage location
   * @return storageLocation
  **/
  @ApiModelProperty(value = "Result Storage location")
  public StorageLocation getStorageLocation() {
    return storageLocation;
  }

  public void setStorageLocation(StorageLocation storageLocation) {
    this.storageLocation = storageLocation;
  }

  public ResultSettings lifecycles(List<Lifecycle> lifecycles) {
    this.lifecycles = lifecycles;
    return this;
  }

  public ResultSettings addLifecyclesItem(Lifecycle lifecyclesItem) {
    if (this.lifecycles == null) {
      this.lifecycles = new ArrayList<>();
    }
    this.lifecycles.add(lifecyclesItem);
    return this;
  }

   /**
   * The lifecycle of result files
   * @return lifecycles
  **/
  @ApiModelProperty(value = "The lifecycle of result files")
  public List<Lifecycle> getLifecycles() {
    return lifecycles;
  }

  public void setLifecycles(List<Lifecycle> lifecycles) {
    this.lifecycles = lifecycles;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultSettings resultSettings = (ResultSettings) o;
    return Objects.equals(this.storageMode, resultSettings.storageMode) &&
        Objects.equals(this.storageLocation, resultSettings.storageLocation) &&
        Objects.equals(this.lifecycles, resultSettings.lifecycles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storageMode, storageLocation, lifecycles);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultSettings {\n");
    
    sb.append("    storageMode: ").append(toIndentedString(storageMode)).append("\n");
    sb.append("    storageLocation: ").append(toIndentedString(storageLocation)).append("\n");
    sb.append("    lifecycles: ").append(toIndentedString(lifecycles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

