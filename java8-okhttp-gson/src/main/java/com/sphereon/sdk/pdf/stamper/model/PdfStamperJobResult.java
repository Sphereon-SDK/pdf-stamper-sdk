/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.pdf.stamper.model.InputResultLocation;
import com.sphereon.sdk.pdf.stamper.model.PdfStamperJobRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * The PDF Stamper job.
 */
@ApiModel(description = "The PDF Stamper job.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-09T08:19:21.333Z")
public class PdfStamperJobResult {
  @SerializedName("completionTime")
  private OffsetDateTime completionTime = null;

  @SerializedName("jobId")
  private String jobId = null;

  @SerializedName("request")
  private PdfStamperJobRequest request = null;

  /**
   * The status of the job
   */
  @JsonAdapter(JobStatusEnum.Adapter.class)
  public enum JobStatusEnum {
    CREATED("CREATED"),
    
    INPUTS_UPLOADED("INPUTS_UPLOADED"),
    
    PROCESSING("PROCESSING"),
    
    DONE("DONE"),
    
    ERROR("ERROR"),
    
    DELETED("DELETED");

    private String value;

    JobStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobStatusEnum fromValue(String text) {
      for (JobStatusEnum b : JobStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<JobStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return JobStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("jobStatus")
  private JobStatusEnum jobStatus = null;

  @SerializedName("creationTime")
  private OffsetDateTime creationTime = null;

  @SerializedName("inputResults")
  private List<InputResultLocation> inputResults = null;

  @SerializedName("updateTime")
  private OffsetDateTime updateTime = null;

  @SerializedName("statusMessage")
  private String statusMessage = null;

  @SerializedName("queueTime")
  private OffsetDateTime queueTime = null;

   /**
   * The completion date/time of this job in ISO 8601 format
   * @return completionTime
  **/
  @ApiModelProperty(value = "The completion date/time of this job in ISO 8601 format")
  public OffsetDateTime getCompletionTime() {
    return completionTime;
  }

   /**
   * The job id
   * @return jobId
  **/
  @ApiModelProperty(value = "The job id")
  public String getJobId() {
    return jobId;
  }

  public PdfStamperJobResult request(PdfStamperJobRequest request) {
    this.request = request;
    return this;
  }

   /**
   * The request settings used during executing the PDF Stamper job
   * @return request
  **/
  @ApiModelProperty(value = "The request settings used during executing the PDF Stamper job")
  public PdfStamperJobRequest getRequest() {
    return request;
  }

  public void setRequest(PdfStamperJobRequest request) {
    this.request = request;
  }

   /**
   * The status of the job
   * @return jobStatus
  **/
  @ApiModelProperty(value = "The status of the job")
  public JobStatusEnum getJobStatus() {
    return jobStatus;
  }

   /**
   * The creation date/time of this job in ISO 8601 format
   * @return creationTime
  **/
  @ApiModelProperty(value = "The creation date/time of this job in ISO 8601 format")
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public PdfStamperJobResult inputResults(List<InputResultLocation> inputResults) {
    this.inputResults = inputResults;
    return this;
  }

  public PdfStamperJobResult addInputResultsItem(InputResultLocation inputResultsItem) {
    if (this.inputResults == null) {
      this.inputResults = new ArrayList<>();
    }
    this.inputResults.add(inputResultsItem);
    return this;
  }

   /**
   * The input(s) and result(s) streamlocation pairs
   * @return inputResults
  **/
  @ApiModelProperty(value = "The input(s) and result(s) streamlocation pairs")
  public List<InputResultLocation> getInputResults() {
    return inputResults;
  }

  public void setInputResults(List<InputResultLocation> inputResults) {
    this.inputResults = inputResults;
  }

   /**
   * The last update date/time of this job in ISO 8601 format
   * @return updateTime
  **/
  @ApiModelProperty(value = "The last update date/time of this job in ISO 8601 format")
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

   /**
   * A status message, which can be informational, warning or error. AA message here does not indicate an error per se
   * @return statusMessage
  **/
  @ApiModelProperty(value = "A status message, which can be informational, warning or error. AA message here does not indicate an error per se")
  public String getStatusMessage() {
    return statusMessage;
  }

   /**
   * The PDF Stamper queue date/time of this job in ISO 8601 format
   * @return queueTime
  **/
  @ApiModelProperty(value = "The PDF Stamper queue date/time of this job in ISO 8601 format")
  public OffsetDateTime getQueueTime() {
    return queueTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfStamperJobResult pdfStamperJobResult = (PdfStamperJobResult) o;
    return Objects.equals(this.completionTime, pdfStamperJobResult.completionTime) &&
        Objects.equals(this.jobId, pdfStamperJobResult.jobId) &&
        Objects.equals(this.request, pdfStamperJobResult.request) &&
        Objects.equals(this.jobStatus, pdfStamperJobResult.jobStatus) &&
        Objects.equals(this.creationTime, pdfStamperJobResult.creationTime) &&
        Objects.equals(this.inputResults, pdfStamperJobResult.inputResults) &&
        Objects.equals(this.updateTime, pdfStamperJobResult.updateTime) &&
        Objects.equals(this.statusMessage, pdfStamperJobResult.statusMessage) &&
        Objects.equals(this.queueTime, pdfStamperJobResult.queueTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionTime, jobId, request, jobStatus, creationTime, inputResults, updateTime, statusMessage, queueTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfStamperJobResult {\n");
    
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    inputResults: ").append(toIndentedString(inputResults)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    queueTime: ").append(toIndentedString(queueTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

