/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/0.2  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.pdf.stamper.model.CanvasComponent;
import com.sphereon.sdk.pdf.stamper.model.StorageLocation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The PDF stamper configuration
 */
@ApiModel(description = "The PDF stamper configuration")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-03T17:44:37.086+01:00")
public class PdfStamperConfig {
  @SerializedName("storageLocation")
  private StorageLocation storageLocation = null;

  @SerializedName("fields")
  private Map<String, String> fields = null;

  @SerializedName("canvasComponents")
  private List<CanvasComponent> canvasComponents = null;

  public PdfStamperConfig storageLocation(StorageLocation storageLocation) {
    this.storageLocation = storageLocation;
    return this;
  }

   /**
   * The storage location where the configuration resources will be stored
   * @return storageLocation
  **/
  @ApiModelProperty(value = "The storage location where the configuration resources will be stored")
  public StorageLocation getStorageLocation() {
    return storageLocation;
  }

  public void setStorageLocation(StorageLocation storageLocation) {
    this.storageLocation = storageLocation;
  }

  public PdfStamperConfig fields(Map<String, String> fields) {
    this.fields = fields;
    return this;
  }

  public PdfStamperConfig putFieldsItem(String key, String fieldsItem) {
    if (this.fields == null) {
      this.fields = new HashMap<>();
    }
    this.fields.put(key, fieldsItem);
    return this;
  }

   /**
   * The form fields that should be filled
   * @return fields
  **/
  @ApiModelProperty(value = "The form fields that should be filled")
  public Map<String, String> getFields() {
    return fields;
  }

  public void setFields(Map<String, String> fields) {
    this.fields = fields;
  }

  public PdfStamperConfig canvasComponents(List<CanvasComponent> canvasComponents) {
    this.canvasComponents = canvasComponents;
    return this;
  }

  public PdfStamperConfig addCanvasComponentsItem(CanvasComponent canvasComponentsItem) {
    if (this.canvasComponents == null) {
      this.canvasComponents = new ArrayList<>();
    }
    this.canvasComponents.add(canvasComponentsItem);
    return this;
  }

   /**
   * The canvas components containing the information of the stamp
   * @return canvasComponents
  **/
  @ApiModelProperty(value = "The canvas components containing the information of the stamp")
  public List<CanvasComponent> getCanvasComponents() {
    return canvasComponents;
  }

  public void setCanvasComponents(List<CanvasComponent> canvasComponents) {
    this.canvasComponents = canvasComponents;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfStamperConfig pdfStamperConfig = (PdfStamperConfig) o;
    return Objects.equals(this.storageLocation, pdfStamperConfig.storageLocation) &&
        Objects.equals(this.fields, pdfStamperConfig.fields) &&
        Objects.equals(this.canvasComponents, pdfStamperConfig.canvasComponents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storageLocation, fields, canvasComponents);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfStamperConfig {\n");
    
    sb.append("    storageLocation: ").append(toIndentedString(storageLocation)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    canvasComponents: ").append(toIndentedString(canvasComponents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

