/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements. The API also supports digital signatures (blue bar), blockchain registrations and filling out forms    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.pdf.stamper.model.Lifecycle;
import com.sphereon.sdk.pdf.stamper.model.StorageLocation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Input settings. Specify, if applicable, external location of the inputfile(s)
 */
@ApiModel(description = "Input settings. Specify, if applicable, external location of the inputfile(s)")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-04-08T13:37:39.498+02:00")
public class InputSettings {
  @SerializedName("storageLocation")
  private StorageLocation storageLocation = null;

  @SerializedName("lifecycles")
  private List<Lifecycle> lifecycles = null;

  public InputSettings storageLocation(StorageLocation storageLocation) {
    this.storageLocation = storageLocation;
    return this;
  }

   /**
   * Input Storage location. This is where input files will be stored when addInput is called
   * @return storageLocation
  **/
  @ApiModelProperty(value = "Input Storage location. This is where input files will be stored when addInput is called")
  public StorageLocation getStorageLocation() {
    return storageLocation;
  }

  public void setStorageLocation(StorageLocation storageLocation) {
    this.storageLocation = storageLocation;
  }

  public InputSettings lifecycles(List<Lifecycle> lifecycles) {
    this.lifecycles = lifecycles;
    return this;
  }

  public InputSettings addLifecyclesItem(Lifecycle lifecyclesItem) {
    if (this.lifecycles == null) {
      this.lifecycles = new ArrayList<>();
    }
    this.lifecycles.add(lifecyclesItem);
    return this;
  }

   /**
   * The lifecycles of input files
   * @return lifecycles
  **/
  @ApiModelProperty(value = "The lifecycles of input files")
  public List<Lifecycle> getLifecycles() {
    return lifecycles;
  }

  public void setLifecycles(List<Lifecycle> lifecycles) {
    this.lifecycles = lifecycles;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputSettings inputSettings = (InputSettings) o;
    return Objects.equals(this.storageLocation, inputSettings.storageLocation) &&
        Objects.equals(this.lifecycles, inputSettings.lifecycles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storageLocation, lifecycles);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputSettings {\n");
    
    sb.append("    storageLocation: ").append(toIndentedString(storageLocation)).append("\n");
    sb.append("    lifecycles: ").append(toIndentedString(lifecycles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

