/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.pdf.stamper.model.InputResultLocation;
import com.sphereon.sdk.pdf.stamper.model.InputSettings;
import com.sphereon.sdk.pdf.stamper.model.Lifecycle;
import com.sphereon.sdk.pdf.stamper.model.ResultSettings;
import com.sphereon.sdk.pdf.stamper.model.StamperConfig;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * PDF stamper job request settings
 */
@ApiModel(description = "PDF stamper job request settings")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-09T04:53:18.701Z")
public class PdfStamperJobRequest {
  @SerializedName("jobLifecycles")
  private List<Lifecycle> jobLifecycles = null;

  @SerializedName("inlineConfig")
  private StamperConfig inlineConfig = null;

  @SerializedName("variables")
  private Map<String, String> variables = null;

  @SerializedName("resultSettings")
  private ResultSettings resultSettings = null;

  @SerializedName("configIds")
  private List<String> configIds = new ArrayList<>();

  @SerializedName("inputResults")
  private List<InputResultLocation> inputResults = new ArrayList<>();

  @SerializedName("formFields")
  private Map<String, String> formFields = null;

  @SerializedName("inputSettings")
  private InputSettings inputSettings = null;

  public PdfStamperJobRequest jobLifecycles(List<Lifecycle> jobLifecycles) {
    this.jobLifecycles = jobLifecycles;
    return this;
  }

  public PdfStamperJobRequest addJobLifecyclesItem(Lifecycle jobLifecyclesItem) {
    if (this.jobLifecycles == null) {
      this.jobLifecycles = new ArrayList<>();
    }
    this.jobLifecycles.add(jobLifecyclesItem);
    return this;
  }

   /**
   * The lifecycles of the job itself
   * @return jobLifecycles
  **/
  @ApiModelProperty(value = "The lifecycles of the job itself")
  public List<Lifecycle> getJobLifecycles() {
    return jobLifecycles;
  }

  public void setJobLifecycles(List<Lifecycle> jobLifecycles) {
    this.jobLifecycles = jobLifecycles;
  }

  public PdfStamperJobRequest inlineConfig(StamperConfig inlineConfig) {
    this.inlineConfig = inlineConfig;
    return this;
  }

   /**
   * Optional job specific config that can be supplied inline. Will be merged with the specified configuration. 
   * @return inlineConfig
  **/
  @ApiModelProperty(value = "Optional job specific config that can be supplied inline. Will be merged with the specified configuration. ")
  public StamperConfig getInlineConfig() {
    return inlineConfig;
  }

  public void setInlineConfig(StamperConfig inlineConfig) {
    this.inlineConfig = inlineConfig;
  }

  public PdfStamperJobRequest variables(Map<String, String> variables) {
    this.variables = variables;
    return this;
  }

  public PdfStamperJobRequest putVariablesItem(String key, String variablesItem) {
    if (this.variables == null) {
      this.variables = new HashMap<>();
    }
    this.variables.put(key, variablesItem);
    return this;
  }

   /**
   * A map with key-values used to replace template variables in components.
   * @return variables
  **/
  @ApiModelProperty(value = "A map with key-values used to replace template variables in components.")
  public Map<String, String> getVariables() {
    return variables;
  }

  public void setVariables(Map<String, String> variables) {
    this.variables = variables;
  }

  public PdfStamperJobRequest resultSettings(ResultSettings resultSettings) {
    this.resultSettings = resultSettings;
    return this;
  }

   /**
   * The result file and lifecycle settings
   * @return resultSettings
  **/
  @ApiModelProperty(value = "The result file and lifecycle settings")
  public ResultSettings getResultSettings() {
    return resultSettings;
  }

  public void setResultSettings(ResultSettings resultSettings) {
    this.resultSettings = resultSettings;
  }

  public PdfStamperJobRequest configIds(List<String> configIds) {
    this.configIds = configIds;
    return this;
  }

  public PdfStamperJobRequest addConfigIdsItem(String configIdsItem) {
    this.configIds.add(configIdsItem);
    return this;
  }

   /**
   * A list of configuration ids that have to be applied during executing the job.
   * @return configIds
  **/
  @ApiModelProperty(required = true, value = "A list of configuration ids that have to be applied during executing the job.")
  public List<String> getConfigIds() {
    return configIds;
  }

  public void setConfigIds(List<String> configIds) {
    this.configIds = configIds;
  }

  public PdfStamperJobRequest inputResults(List<InputResultLocation> inputResults) {
    this.inputResults = inputResults;
    return this;
  }

  public PdfStamperJobRequest addInputResultsItem(InputResultLocation inputResultsItem) {
    this.inputResults.add(inputResultsItem);
    return this;
  }

   /**
   * The input(s) and optional result(s)
   * @return inputResults
  **/
  @ApiModelProperty(required = true, value = "The input(s) and optional result(s)")
  public List<InputResultLocation> getInputResults() {
    return inputResults;
  }

  public void setInputResults(List<InputResultLocation> inputResults) {
    this.inputResults = inputResults;
  }

  public PdfStamperJobRequest formFields(Map<String, String> formFields) {
    this.formFields = formFields;
    return this;
  }

  public PdfStamperJobRequest putFormFieldsItem(String key, String formFieldsItem) {
    if (this.formFields == null) {
      this.formFields = new HashMap<>();
    }
    this.formFields.put(key, formFieldsItem);
    return this;
  }

   /**
   * A map with key-values used to input values in a PDF form.
   * @return formFields
  **/
  @ApiModelProperty(value = "A map with key-values used to input values in a PDF form.")
  public Map<String, String> getFormFields() {
    return formFields;
  }

  public void setFormFields(Map<String, String> formFields) {
    this.formFields = formFields;
  }

  public PdfStamperJobRequest inputSettings(InputSettings inputSettings) {
    this.inputSettings = inputSettings;
    return this;
  }

   /**
   * The input file and lifecycle settings
   * @return inputSettings
  **/
  @ApiModelProperty(value = "The input file and lifecycle settings")
  public InputSettings getInputSettings() {
    return inputSettings;
  }

  public void setInputSettings(InputSettings inputSettings) {
    this.inputSettings = inputSettings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfStamperJobRequest pdfStamperJobRequest = (PdfStamperJobRequest) o;
    return Objects.equals(this.jobLifecycles, pdfStamperJobRequest.jobLifecycles) &&
        Objects.equals(this.inlineConfig, pdfStamperJobRequest.inlineConfig) &&
        Objects.equals(this.variables, pdfStamperJobRequest.variables) &&
        Objects.equals(this.resultSettings, pdfStamperJobRequest.resultSettings) &&
        Objects.equals(this.configIds, pdfStamperJobRequest.configIds) &&
        Objects.equals(this.inputResults, pdfStamperJobRequest.inputResults) &&
        Objects.equals(this.formFields, pdfStamperJobRequest.formFields) &&
        Objects.equals(this.inputSettings, pdfStamperJobRequest.inputSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobLifecycles, inlineConfig, variables, resultSettings, configIds, inputResults, formFields, inputSettings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfStamperJobRequest {\n");
    
    sb.append("    jobLifecycles: ").append(toIndentedString(jobLifecycles)).append("\n");
    sb.append("    inlineConfig: ").append(toIndentedString(inlineConfig)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    resultSettings: ").append(toIndentedString(resultSettings)).append("\n");
    sb.append("    configIds: ").append(toIndentedString(configIds)).append("\n");
    sb.append("    inputResults: ").append(toIndentedString(inputResults)).append("\n");
    sb.append("    formFields: ").append(toIndentedString(formFields)).append("\n");
    sb.append("    inputSettings: ").append(toIndentedString(inputSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

