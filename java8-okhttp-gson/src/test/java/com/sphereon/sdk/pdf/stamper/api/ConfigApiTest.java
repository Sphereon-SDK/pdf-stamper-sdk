/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.api;

import com.sphereon.sdk.pdf.stamper.handler.ApiException;
import java.io.File;
import com.sphereon.sdk.pdf.stamper.model.StamperConfig;
import com.sphereon.sdk.pdf.stamper.model.StamperConfigResponse;
import com.sphereon.sdk.pdf.stamper.model.StreamLocation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigApi
 */
@Ignore
public class ConfigApiTest {

    private final ConfigApi api = new ConfigApi();

    
    /**
     * Create PDF stamper configuration
     *
     * Create / initialize a new PDF stamper configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigurationTest() throws ApiException {
        StamperConfig stampConfiguration = null;
        StamperConfigResponse response = api.createConfiguration(stampConfiguration);

        // TODO: test validations
    }
    
    /**
     * Delete PDF stamper configuration
     *
     * Delete a PDF stamper configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigurationTest() throws ApiException {
        String configId = null;
        StamperConfigResponse response = api.deleteConfiguration(configId);

        // TODO: test validations
    }
    
    /**
     * Delete resources
     *
     * Delete resources referenced by a configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteResourcesTest() throws ApiException {
        String configId = null;
        List<StreamLocation> streamLocations = null;
        api.deleteResources(configId, streamLocations);

        // TODO: test validations
    }
    
    /**
     * Get PDF stamper configuration
     *
     * Retrieve a PDF stamper configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigurationTest() throws ApiException {
        String configId = null;
        StamperConfigResponse response = api.getConfiguration(configId);

        // TODO: test validations
    }
    
    /**
     * Update PDF stamper configuration
     *
     * Update an existing PDF stamper configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateConfigurationTest() throws ApiException {
        String configId = null;
        StamperConfig stampConfiguration = null;
        StamperConfigResponse response = api.updateConfiguration(configId, stampConfiguration);

        // TODO: test validations
    }
    
    /**
     * Upload a configuration resource
     *
     * Upload a resource needed by a configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadResourceTest() throws ApiException {
        String configId = null;
        File stream = null;
        StreamLocation response = api.uploadResource(configId, stream);

        // TODO: test validations
    }
    
}
