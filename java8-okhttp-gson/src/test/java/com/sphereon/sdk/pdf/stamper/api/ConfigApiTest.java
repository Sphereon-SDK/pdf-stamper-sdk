/*
 * PDF stamper
 * The PDF stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more text, image or barcode elements.    The flow is generally as follows:  1. Make sure a configuration is present using the config API  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job, optionally   5. Retrieve the processed files   A simplified flow is available using the sync controller    Full API Documentation: https://docs.sphereon.com/api/pdf/stamp/0.1/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.api;

import com.sphereon.sdk.pdf.stamper.handler.ApiException;
import java.io.File;
import com.sphereon.sdk.pdf.stamper.model.PdfStamperConfig;
import com.sphereon.sdk.pdf.stamper.model.PdfStamperConfigContainer;
import com.sphereon.sdk.pdf.stamper.model.StreamLocation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigApi
 */
@Ignore
public class ConfigApiTest {

    private final ConfigApi api = new ConfigApi();

    
    /**
     * Create PDF stamper configuration
     *
     * Create / initialize a new PDF stamper configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigurationTest() throws ApiException {
        PdfStamperConfig pdfStamperConfiguration = null;
        PdfStamperConfigContainer response = api.createConfiguration(pdfStamperConfiguration);

        // TODO: test validations
    }
    
    /**
     * Delete PDF stamper configuration
     *
     * Delete a PDF stamper configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigurationTest() throws ApiException {
        String configId = null;
        PdfStamperConfigContainer response = api.deleteConfiguration(configId);

        // TODO: test validations
    }
    
    /**
     * Delete resources
     *
     * Delete resources referenced by a configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteResourcesTest() throws ApiException {
        String configId = null;
        List<StreamLocation> streamLocations = null;
        api.deleteResources(configId, streamLocations);

        // TODO: test validations
    }
    
    /**
     * Get PDF stamper configuration
     *
     * Retrieve a PDF stamper configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigurationTest() throws ApiException {
        String configId = null;
        PdfStamperConfigContainer response = api.getConfiguration(configId);

        // TODO: test validations
    }
    
    /**
     * Update PDF stamper configuration
     *
     * Update an existing PDF stamper configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateConfigurationTest() throws ApiException {
        String configId = null;
        PdfStamperConfig pdfStamperConfiguration = null;
        PdfStamperConfigContainer response = api.updateConfiguration(configId, pdfStamperConfiguration);

        // TODO: test validations
    }
    
    /**
     * Upload resource
     *
     * Upload a resource needed by a configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadResourceTest() throws ApiException {
        String configId = null;
        File stream = null;
        StreamLocation response = api.uploadResource(configId, stream);

        // TODO: test validations
    }
    
}
