/*
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.api;

import com.sphereon.sdk.pdf.stamper.handler.ApiException;
import com.sphereon.sdk.pdf.stamper.model.ContentRequest;
import com.sphereon.sdk.pdf.stamper.model.ErrorResponse;
import java.io.File;
import com.sphereon.sdk.pdf.stamper.model.InputResultLocation;
import com.sphereon.sdk.pdf.stamper.model.PdfStamperJobRequest;
import com.sphereon.sdk.pdf.stamper.model.PdfStamperJobResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsApi
 */
@Ignore
public class JobsApiTest {

    private final JobsApi api = new JobsApi();

    
    /**
     * Upload a base64 encoded file
     *
     * Upload an image, office or pdf for conversion to PDF, embedded in a json as a base64 encoded string
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addContentTest() throws ApiException {
        ContentRequest contentRequest = null;
        String jobId = null;
        PdfStamperJobResult response = api.addContent(contentRequest, jobId);

        // TODO: test validations
    }
    
    /**
     * Upload a file
     *
     * Upload a pdf to stamp one or more configurations. Please note that you can upload multiple files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInputFileTest() throws ApiException {
        String jobId = null;
        File stream = null;
        PdfStamperJobResult response = api.addInputFile(jobId, stream);

        // TODO: test validations
    }
    
    /**
     * Add Input Stream Location(s)
     *
     * Add image, office or pdf input stream location(s) from the storage API for conversion to PDF. Please note that you can upload multiple files. Conversion will not be started yet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInputStreamLocationsTest() throws ApiException {
        String jobId = null;
        List<InputResultLocation> streamLocations = null;
        PdfStamperJobResult response = api.addInputStreamLocations(jobId, streamLocations);

        // TODO: test validations
    }
    
    /**
     * Create PDF stamper job
     *
     * Create a job using the given settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createJobTest() throws ApiException {
        PdfStamperJobRequest jobRequest = null;
        PdfStamperJobResult response = api.createJob(jobRequest);

        // TODO: test validations
    }
    
    /**
     * Delete a job manually
     *
     * Delete the PDF stamper job and all related files depending on the lifecycle.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        String jobId = null;
        PdfStamperJobResult response = api.deleteJob(jobId);

        // TODO: test validations
    }
    
    /**
     * Get the current/first result stream
     *
     * Get the PDF stamper as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.  This means we use a separate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status is DONE.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFirstStreamTest() throws ApiException {
        String jobId = null;
        byte[] response = api.getFirstStream(jobId);

        // TODO: test validations
    }
    
    /**
     * Job definition and state
     *
     * Get the PDF stamper job definition and current state. Please note that you can differentiate based on http response status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String jobId = null;
        PdfStamperJobResult response = api.getJob(jobId);

        // TODO: test validations
    }
    
    /**
     * Get all jobs
     *
     * Get all PDF stamper job definitions and their current state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        List<String> jobStatuses = null;
        List<PdfStamperJobResult> response = api.getJobs(jobStatuses);

        // TODO: test validations
    }
    
    /**
     * Get the result stream by correlation Id
     *
     * Get the PDF stamper as binary stream/file by correlation Id.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.  This means we use a separate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status is DONE.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStreamByIdTest() throws ApiException {
        String correlationId = null;
        String jobId = null;
        byte[] response = api.getStreamById(correlationId, jobId);

        // TODO: test validations
    }
    
    /**
     * Submit PDF stamper job for processing
     *
     * Start PDF stamper job for processing. Stamp one or more configurations on the previously uploaded PDFs. If the optional settings are supplied with the job in the request body, they are being used, otherwise the settings created during job creation are being used. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitJobTest() throws ApiException {
        String jobId = null;
        PdfStamperJobResult response = api.submitJob(jobId);

        // TODO: test validations
    }
    
}
