/*
 * PDF stamper
 * The PDF stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more text, image or barcode elements.    The flow is generally as follows:  1. Make sure a configuration is present using the config API  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job, optionally   5. Retrieve the processed files   A simplified flow is available using the sync controller    Full API Documentation: https://docs.sphereon.com/api/pdf/stamp/0.1/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.stamper.api;

import com.sphereon.sdk.pdf.stamper.handler.ApiException;
import com.sphereon.sdk.pdf.stamper.model.ErrorResponse;
import java.io.File;
import com.sphereon.sdk.pdf.stamper.model.FileContentRequest;
import com.sphereon.sdk.pdf.stamper.model.PdfStamperJobContainer;
import com.sphereon.sdk.pdf.stamper.model.PdfStamperJobSettings;
import com.sphereon.sdk.pdf.stamper.model.StreamLocation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsApi
 */
@Ignore
public class JobsApiTest {

    private final JobsApi api = new JobsApi();

    
    /**
     * Upload a base64 encoded file
     *
     * Upload an image, office or pdf for conversion to PDF, embedded in a json as a base64 encoded string
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addContentTest() throws ApiException {
        FileContentRequest fileContent = null;
        String jobid = null;
        PdfStamperJobContainer response = api.addContent(fileContent, jobid);

        // TODO: test validations
    }
    
    /**
     * Upload a file
     *
     * Upload an image, office or pdf for conversion to PDF. Please note that you can upload multiple files. Conversion will not be started yet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInputFileTest() throws ApiException {
        String jobid = null;
        File stream = null;
        PdfStamperJobContainer response = api.addInputFile(jobid, stream);

        // TODO: test validations
    }
    
    /**
     * Add Input Stream Location(s)
     *
     * Add image, office or pdf input stream location(s) from the storage API for conversion to PDF. Please note that you can upload multiple files. Conversion will not be started yet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInputStreamLocationsTest() throws ApiException {
        String jobid = null;
        List<StreamLocation> streamLocations = null;
        PdfStamperJobContainer response = api.addInputStreamLocations(jobid, streamLocations);

        // TODO: test validations
    }
    
    /**
     * Create PDF stamper job
     *
     * Create a job using the given settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createJobTest() throws ApiException {
        PdfStamperJobSettings jobSettings = null;
        PdfStamperJobContainer response = api.createJob(jobSettings);

        // TODO: test validations
    }
    
    /**
     * Delete a job manually
     *
     * Delete the PDF job and all related files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        String jobid = null;
        PdfStamperJobContainer response = api.deleteJob(jobid);

        // TODO: test validations
    }
    
    /**
     * Job definition and state
     *
     * Get the PDF job definition and current state. Please note that you can differentiate based on http response status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String jobid = null;
        PdfStamperJobContainer response = api.getJob(jobid);

        // TODO: test validations
    }
    
    /**
     * Get all jobs
     *
     * Get all PDF job definitions and their current state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        List<String> jobStatuses = null;
        List<PdfStamperJobContainer> response = api.getJobs(jobStatuses);

        // TODO: test validations
    }
    
    /**
     * Get the current result stream
     *
     * Get the PDF as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.  This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStreamTest() throws ApiException {
        String jobid = null;
        byte[] response = api.getStream(jobid);

        // TODO: test validations
    }
    
    /**
     * Submit PDF job for processing
     *
     * Start PDF conversion. Convert the previously uploaded file(s) to PDF. The settings supplied with the job in the request body are used for the conversion. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitJobTest() throws ApiException {
        PdfStamperJobSettings job = null;
        String jobid = null;
        PdfStamperJobContainer response = api.submitJob(job, jobid);

        // TODO: test validations
    }
    
}
