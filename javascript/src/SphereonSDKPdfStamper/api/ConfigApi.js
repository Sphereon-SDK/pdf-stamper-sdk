/**
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKPdfStamper/ApiClient', 'SphereonSDKPdfStamper/model/StamperConfig', 'SphereonSDKPdfStamper/model/StamperConfigResponse', 'SphereonSDKPdfStamper/model/StreamLocation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/StamperConfig'), require('../model/StamperConfigResponse'), require('../model/StreamLocation'));
  } else {
    // Browser globals (root is window)
    if (!root.PdfStamper) {
      root.PdfStamper = {};
    }
    root.PdfStamper.ConfigApi = factory(root.PdfStamper.ApiClient, root.PdfStamper.StamperConfig, root.PdfStamper.StamperConfigResponse, root.PdfStamper.StreamLocation);
  }
}(this, function(ApiClient, StamperConfig, StamperConfigResponse, StreamLocation) {
  'use strict';

  /**
   * Config service.
   * @module SphereonSDKPdfStamper/api/ConfigApi
   * @version 1.0
   */

  /**
   * Constructs a new ConfigApi. 
   * @alias module:SphereonSDKPdfStamper/api/ConfigApi
   * @class
   * @param {module:SphereonSDKPdfStamper/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:SphereonSDKPdfStamper/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createConfiguration operation.
     * @callback module:SphereonSDKPdfStamper/api/ConfigApi~createConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKPdfStamper/model/StamperConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create PDF stamper configuration
     * Create / initialize a new PDF stamper configuration.
     * @param {module:SphereonSDKPdfStamper/model/StamperConfig} stampConfiguration The PDF stamper configuration
     * @param {module:SphereonSDKPdfStamper/api/ConfigApi~createConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKPdfStamper/model/StamperConfigResponse}
     */
    this.createConfiguration = function(stampConfiguration, callback) {
      var postBody = stampConfiguration;

      // verify the required parameter 'stampConfiguration' is set
      if (stampConfiguration === undefined || stampConfiguration === null) {
        throw new Error("Missing the required parameter 'stampConfiguration' when calling createConfiguration");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StamperConfigResponse;

      return this.apiClient.callApi(
        '/config', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfiguration operation.
     * @callback module:SphereonSDKPdfStamper/api/ConfigApi~deleteConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKPdfStamper/model/StamperConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete PDF stamper configuration
     * Delete a PDF stamper configuration.
     * @param {String} configId The PDF stamper configuration id
     * @param {module:SphereonSDKPdfStamper/api/ConfigApi~deleteConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKPdfStamper/model/StamperConfigResponse}
     */
    this.deleteConfiguration = function(configId, callback) {
      var postBody = null;

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling deleteConfiguration");
      }


      var pathParams = {
        'configId': configId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = [];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StamperConfigResponse;

      return this.apiClient.callApi(
        '/config/{configId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResources operation.
     * @callback module:SphereonSDKPdfStamper/api/ConfigApi~deleteResourcesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete resources
     * Delete resources referenced by a configuration.
     * @param {String} configId The PDF stamper configuration id
     * @param {Array.<module:SphereonSDKPdfStamper/model/StreamLocation>} streamLocations The resource locations in storage
     * @param {module:SphereonSDKPdfStamper/api/ConfigApi~deleteResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteResources = function(configId, streamLocations, callback) {
      var postBody = streamLocations;

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling deleteResources");
      }

      // verify the required parameter 'streamLocations' is set
      if (streamLocations === undefined || streamLocations === null) {
        throw new Error("Missing the required parameter 'streamLocations' when calling deleteResources");
      }


      var pathParams = {
        'configId': configId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/{configId}/streams', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguration operation.
     * @callback module:SphereonSDKPdfStamper/api/ConfigApi~getConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKPdfStamper/model/StamperConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get PDF stamper configuration
     * Retrieve a PDF stamper configuration.
     * @param {String} configId The PDF stamper configuration id
     * @param {module:SphereonSDKPdfStamper/api/ConfigApi~getConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKPdfStamper/model/StamperConfigResponse}
     */
    this.getConfiguration = function(configId, callback) {
      var postBody = null;

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling getConfiguration");
      }


      var pathParams = {
        'configId': configId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = [];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StamperConfigResponse;

      return this.apiClient.callApi(
        '/config/{configId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfiguration operation.
     * @callback module:SphereonSDKPdfStamper/api/ConfigApi~updateConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKPdfStamper/model/StamperConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update PDF stamper configuration
     * Update an existing PDF stamper configuration.
     * @param {String} configId The PDF stamper configuration id
     * @param {module:SphereonSDKPdfStamper/model/StamperConfig} stampConfiguration The PDF stamper configuration
     * @param {module:SphereonSDKPdfStamper/api/ConfigApi~updateConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKPdfStamper/model/StamperConfigResponse}
     */
    this.updateConfiguration = function(configId, stampConfiguration, callback) {
      var postBody = stampConfiguration;

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling updateConfiguration");
      }

      // verify the required parameter 'stampConfiguration' is set
      if (stampConfiguration === undefined || stampConfiguration === null) {
        throw new Error("Missing the required parameter 'stampConfiguration' when calling updateConfiguration");
      }


      var pathParams = {
        'configId': configId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StamperConfigResponse;

      return this.apiClient.callApi(
        '/config/{configId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadResource operation.
     * @callback module:SphereonSDKPdfStamper/api/ConfigApi~uploadResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKPdfStamper/model/StreamLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a configuration resource
     * Upload a resource needed by a configuration.
     * @param {String} configId configId
     * @param {File} stream The resource data
     * @param {module:SphereonSDKPdfStamper/api/ConfigApi~uploadResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKPdfStamper/model/StreamLocation}
     */
    this.uploadResource = function(configId, stream, callback) {
      var postBody = null;

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling uploadResource");
      }

      // verify the required parameter 'stream' is set
      if (stream === undefined || stream === null) {
        throw new Error("Missing the required parameter 'stream' when calling uploadResource");
      }


      var pathParams = {
        'configId': configId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stream': stream
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StreamLocation;

      return this.apiClient.callApi(
        '/config/{configId}/streams/multipart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
