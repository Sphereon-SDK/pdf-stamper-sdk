/**
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements. The API also supports digital signatures (blue bar), blockchain registrations and filling out forms    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKPdfStamper/ApiClient', 'SphereonSDKPdfStamper/model/ContentRequest', 'SphereonSDKPdfStamper/model/ErrorResponse', 'SphereonSDKPdfStamper/model/InputResultLocation', 'SphereonSDKPdfStamper/model/PdfStamperJobRequest', 'SphereonSDKPdfStamper/model/PdfStamperJobResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContentRequest'), require('../model/ErrorResponse'), require('../model/InputResultLocation'), require('../model/PdfStamperJobRequest'), require('../model/PdfStamperJobResult'));
  } else {
    // Browser globals (root is window)
    if (!root.PdfStamper) {
      root.PdfStamper = {};
    }
    root.PdfStamper.JobsApi = factory(root.PdfStamper.ApiClient, root.PdfStamper.ContentRequest, root.PdfStamper.ErrorResponse, root.PdfStamper.InputResultLocation, root.PdfStamper.PdfStamperJobRequest, root.PdfStamper.PdfStamperJobResult);
  }
}(this, function(ApiClient, ContentRequest, ErrorResponse, InputResultLocation, PdfStamperJobRequest, PdfStamperJobResult) {
  'use strict';

  /**
   * Jobs service.
   * @module SphereonSDKPdfStamper/api/JobsApi
   * @version 1.0
   */

  /**
   * Constructs a new JobsApi. 
   * @alias module:SphereonSDKPdfStamper/api/JobsApi
   * @class
   * @param {module:SphereonSDKPdfStamper/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:SphereonSDKPdfStamper/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addContent operation.
     * @callback module:SphereonSDKPdfStamper/api/JobsApi~addContentCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKPdfStamper/model/PdfStamperJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a base64 encoded file
     * Upload an image, office or pdf for conversion to PDF, embedded in a json as a base64 encoded string
     * @param {module:SphereonSDKPdfStamper/model/ContentRequest} contentRequest Content request
     * @param {String} jobId jobId
     * @param {module:SphereonSDKPdfStamper/api/JobsApi~addContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKPdfStamper/model/PdfStamperJobResult}
     */
    this.addContent = function(contentRequest, jobId, callback) {
      var postBody = contentRequest;

      // verify the required parameter 'contentRequest' is set
      if (contentRequest === undefined || contentRequest === null) {
        throw new Error("Missing the required parameter 'contentRequest' when calling addContent");
      }

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling addContent");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = PdfStamperJobResult;

      return this.apiClient.callApi(
        '/jobs/{jobId}/streams/content', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addInputFile operation.
     * @callback module:SphereonSDKPdfStamper/api/JobsApi~addInputFileCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKPdfStamper/model/PdfStamperJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a file
     * Upload a pdf to stamp one or more configurations. Please note that you can upload multiple files.
     * @param {String} jobId jobId
     * @param {File} stream The (additional) binary image or PDF (file/inputstream) to convert to PDF
     * @param {module:SphereonSDKPdfStamper/api/JobsApi~addInputFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKPdfStamper/model/PdfStamperJobResult}
     */
    this.addInputFile = function(jobId, stream, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling addInputFile");
      }

      // verify the required parameter 'stream' is set
      if (stream === undefined || stream === null) {
        throw new Error("Missing the required parameter 'stream' when calling addInputFile");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stream': stream
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = PdfStamperJobResult;

      return this.apiClient.callApi(
        '/jobs/{jobId}/streams/multipart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addInputStreamLocations operation.
     * @callback module:SphereonSDKPdfStamper/api/JobsApi~addInputStreamLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKPdfStamper/model/PdfStamperJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Input Stream Location(s)
     * Add image, office or pdf input stream location(s) from the storage API for conversion to PDF. Please note that you can upload multiple files. Conversion will not be started yet.
     * @param {String} jobId jobId
     * @param {Array.<module:SphereonSDKPdfStamper/model/InputResultLocation>} streamLocations The (additional) binary image or PDF (file/inputstream) to convert to PDF
     * @param {module:SphereonSDKPdfStamper/api/JobsApi~addInputStreamLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKPdfStamper/model/PdfStamperJobResult}
     */
    this.addInputStreamLocations = function(jobId, streamLocations, callback) {
      var postBody = streamLocations;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling addInputStreamLocations");
      }

      // verify the required parameter 'streamLocations' is set
      if (streamLocations === undefined || streamLocations === null) {
        throw new Error("Missing the required parameter 'streamLocations' when calling addInputStreamLocations");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = PdfStamperJobResult;

      return this.apiClient.callApi(
        '/jobs/{jobId}/streams/location', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createJob operation.
     * @callback module:SphereonSDKPdfStamper/api/JobsApi~createJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKPdfStamper/model/PdfStamperJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create PDF stamper job
     * Create a job using the given settings.
     * @param {module:SphereonSDKPdfStamper/model/PdfStamperJobRequest} jobRequest jobRequest
     * @param {module:SphereonSDKPdfStamper/api/JobsApi~createJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKPdfStamper/model/PdfStamperJobResult}
     */
    this.createJob = function(jobRequest, callback) {
      var postBody = jobRequest;

      // verify the required parameter 'jobRequest' is set
      if (jobRequest === undefined || jobRequest === null) {
        throw new Error("Missing the required parameter 'jobRequest' when calling createJob");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = PdfStamperJobResult;

      return this.apiClient.callApi(
        '/jobs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJob operation.
     * @callback module:SphereonSDKPdfStamper/api/JobsApi~deleteJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKPdfStamper/model/PdfStamperJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a job manually
     * Delete the PDF stamper job and all related files depending on the lifecycle.
     * @param {String} jobId jobId
     * @param {module:SphereonSDKPdfStamper/api/JobsApi~deleteJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKPdfStamper/model/PdfStamperJobResult}
     */
    this.deleteJob = function(jobId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling deleteJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = [];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = PdfStamperJobResult;

      return this.apiClient.callApi(
        '/jobs/{jobId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFirstStream operation.
     * @callback module:SphereonSDKPdfStamper/api/JobsApi~getFirstStreamCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current/first result stream
     * Get the PDF stamper as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.  This means we use a separate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status is DONE.
     * @param {String} jobId jobId
     * @param {module:SphereonSDKPdfStamper/api/JobsApi~getFirstStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.getFirstStream = function(jobId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getFirstStream");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = [];
      var accepts = ['application/octet-stream', 'application/json;charset=UTF-8'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/jobs/{jobId}/streams/result', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJob operation.
     * @callback module:SphereonSDKPdfStamper/api/JobsApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKPdfStamper/model/PdfStamperJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Job definition and state
     * Get the PDF stamper job definition and current state. Please note that you can differentiate based on http response status.
     * @param {String} jobId jobId
     * @param {module:SphereonSDKPdfStamper/api/JobsApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKPdfStamper/model/PdfStamperJobResult}
     */
    this.getJob = function(jobId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = [];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = PdfStamperJobResult;

      return this.apiClient.callApi(
        '/jobs/{jobId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobs operation.
     * @callback module:SphereonSDKPdfStamper/api/JobsApi~getJobsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:SphereonSDKPdfStamper/model/PdfStamperJobResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all jobs
     * Get all PDF stamper job definitions and their current state.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:SphereonSDKPdfStamper/model/String>} opts.jobStatuses A list of jobStatuses to filter on.
     * @param {module:SphereonSDKPdfStamper/api/JobsApi~getJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:SphereonSDKPdfStamper/model/PdfStamperJobResult>}
     */
    this.getJobs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'jobStatuses': {
          value: opts['jobStatuses'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = [];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = [PdfStamperJobResult];

      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStreamById operation.
     * @callback module:SphereonSDKPdfStamper/api/JobsApi~getStreamByIdCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the result stream by correlation Id
     * Get the PDF stamper as binary stream/file by correlation Id.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.  This means we use a separate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status is DONE.
     * @param {String} correlationId correlationId
     * @param {String} jobId jobId
     * @param {module:SphereonSDKPdfStamper/api/JobsApi~getStreamByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.getStreamById = function(correlationId, jobId, callback) {
      var postBody = null;

      // verify the required parameter 'correlationId' is set
      if (correlationId === undefined || correlationId === null) {
        throw new Error("Missing the required parameter 'correlationId' when calling getStreamById");
      }

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getStreamById");
      }


      var pathParams = {
        'correlationId': correlationId,
        'jobId': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = [];
      var accepts = ['application/octet-stream', 'application/json;charset=UTF-8'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/jobs/{jobId}/streams/result/{correlationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the submitJob operation.
     * @callback module:SphereonSDKPdfStamper/api/JobsApi~submitJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKPdfStamper/model/PdfStamperJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit PDF stamper job for processing
     * Start PDF stamper job for processing. Stamp one or more configurations on the previously uploaded PDFs. If the optional settings are supplied with the job in the request body, they are being used, otherwise the settings created during job creation are being used. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR.
     * @param {String} jobId jobId
     * @param {module:SphereonSDKPdfStamper/api/JobsApi~submitJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKPdfStamper/model/PdfStamperJobResult}
     */
    this.submitJob = function(jobId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling submitJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = PdfStamperJobResult;

      return this.apiClient.callApi(
        '/jobs/{jobId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
