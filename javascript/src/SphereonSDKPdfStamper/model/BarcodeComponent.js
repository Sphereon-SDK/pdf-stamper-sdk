/**
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements. The API also supports digital signatures (blue bar), blockchain registrations and filling out forms    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKPdfStamper/ApiClient', 'SphereonSDKPdfStamper/model/Border', 'SphereonSDKPdfStamper/model/Connector', 'SphereonSDKPdfStamper/model/Point', 'SphereonSDKPdfStamper/model/StampComponent'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Border'), require('./Connector'), require('./Point'), require('./StampComponent'));
  } else {
    // Browser globals (root is window)
    if (!root.PdfStamper) {
      root.PdfStamper = {};
    }
    root.PdfStamper.BarcodeComponent = factory(root.PdfStamper.ApiClient, root.PdfStamper.Border, root.PdfStamper.Connector, root.PdfStamper.Point, root.PdfStamper.StampComponent);
  }
}(this, function(ApiClient, Border, Connector, Point, StampComponent) {
  'use strict';




  /**
   * The BarcodeComponent model module.
   * @module SphereonSDKPdfStamper/model/BarcodeComponent
   * @version 1.0
   */

  /**
   * Constructs a new <code>BarcodeComponent</code>.
   * A barcode component to stamp a barcode or QR code on a pdf
   * @alias module:SphereonSDKPdfStamper/model/BarcodeComponent
   * @class
   * @extends module:SphereonSDKPdfStamper/model/StampComponent
   * @param barcodeFormat {module:SphereonSDKPdfStamper/model/BarcodeComponent.BarcodeFormatEnum} The barcode format to generate
   * @param width {Number} The preferred width in pixels
   * @param content {String} The contents to encode in the barcode
   * @param height {Number} The preferred height in pixels
   */
  var exports = function(barcodeFormat, width, content, height) {
    var _this = this;
    StampComponent.call(_this);

    _this['barcodeFormat'] = barcodeFormat;
    _this['width'] = width;
    _this['content'] = content;
    _this['height'] = height;

  };

  /**
   * Constructs a <code>BarcodeComponent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKPdfStamper/model/BarcodeComponent} obj Optional instance to populate.
   * @return {module:SphereonSDKPdfStamper/model/BarcodeComponent} The populated <code>BarcodeComponent</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      StampComponent.constructFromObject(data, obj);
      if (data.hasOwnProperty('errorCorrectionLevel')) {
        obj['errorCorrectionLevel'] = ApiClient.convertToType(data['errorCorrectionLevel'], 'String');
      }
      if (data.hasOwnProperty('barcodeFormat')) {
        obj['barcodeFormat'] = ApiClient.convertToType(data['barcodeFormat'], 'String');
      }
      if (data.hasOwnProperty('width')) {
        obj['width'] = ApiClient.convertToType(data['width'], 'Number');
      }
      if (data.hasOwnProperty('content')) {
        obj['content'] = ApiClient.convertToType(data['content'], 'String');
      }
      if (data.hasOwnProperty('height')) {
        obj['height'] = ApiClient.convertToType(data['height'], 'Number');
      }
      if (data.hasOwnProperty('qrVersion')) {
        obj['qrVersion'] = ApiClient.convertToType(data['qrVersion'], 'Number');
      }
    }
    return obj;
  }

  exports.prototype = Object.create(StampComponent.prototype);
  exports.prototype.constructor = exports;

  /**
   * Specifies what degree of error correction to use, for example in QR Codes, See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels defined by the QR code standard
   * @member {module:SphereonSDKPdfStamper/model/BarcodeComponent.ErrorCorrectionLevelEnum} errorCorrectionLevel
   */
  exports.prototype['errorCorrectionLevel'] = undefined;
  /**
   * The barcode format to generate
   * @member {module:SphereonSDKPdfStamper/model/BarcodeComponent.BarcodeFormatEnum} barcodeFormat
   */
  exports.prototype['barcodeFormat'] = undefined;
  /**
   * The preferred width in pixels
   * @member {Number} width
   */
  exports.prototype['width'] = undefined;
  /**
   * The contents to encode in the barcode
   * @member {String} content
   */
  exports.prototype['content'] = undefined;
  /**
   * The preferred height in pixels
   * @member {Number} height
   */
  exports.prototype['height'] = undefined;
  /**
   * @member {Number} qrVersion
   */
  exports.prototype['qrVersion'] = undefined;


  /**
   * Allowed values for the <code>errorCorrectionLevel</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ErrorCorrectionLevelEnum = {
    /**
     * value: "QR_L"
     * @const
     */
    "L": "QR_L",
    /**
     * value: "QR_M"
     * @const
     */
    "M": "QR_M",
    /**
     * value: "QR_Q"
     * @const
     */
    "Q": "QR_Q",
    /**
     * value: "QR_H"
     * @const
     */
    "H": "QR_H"  };

  /**
   * Allowed values for the <code>barcodeFormat</code> property.
   * @enum {String}
   * @readonly
   */
  exports.BarcodeFormatEnum = {
    /**
     * value: "AZTEC"
     * @const
     */
    "AZTEC": "AZTEC",
    /**
     * value: "CODABAR"
     * @const
     */
    "CODABAR": "CODABAR",
    /**
     * value: "CODE_39"
     * @const
     */
    "CODE_39": "CODE_39",
    /**
     * value: "CODE_93"
     * @const
     */
    "CODE_93": "CODE_93",
    /**
     * value: "CODE_128"
     * @const
     */
    "CODE_128": "CODE_128",
    /**
     * value: "DATA_MATRIX"
     * @const
     */
    "DATA_MATRIX": "DATA_MATRIX",
    /**
     * value: "EAN_8"
     * @const
     */
    "EAN_8": "EAN_8",
    /**
     * value: "EAN_13"
     * @const
     */
    "EAN_13": "EAN_13",
    /**
     * value: "ITF"
     * @const
     */
    "ITF": "ITF",
    /**
     * value: "MAXICODE"
     * @const
     */
    "MAXICODE": "MAXICODE",
    /**
     * value: "PDF_417"
     * @const
     */
    "PDF_417": "PDF_417",
    /**
     * value: "QR_CODE"
     * @const
     */
    "QR_CODE": "QR_CODE",
    /**
     * value: "RSS_14"
     * @const
     */
    "RSS_14": "RSS_14",
    /**
     * value: "RSS_EXPANDED"
     * @const
     */
    "RSS_EXPANDED": "RSS_EXPANDED",
    /**
     * value: "UPC_A"
     * @const
     */
    "UPC_A": "UPC_A",
    /**
     * value: "UPC_E"
     * @const
     */
    "UPC_E": "UPC_E",
    /**
     * value: "UPC_EAN_EXTENSION"
     * @const
     */
    "UPC_EAN_EXTENSION": "UPC_EAN_EXTENSION"  };


  return exports;
}));


