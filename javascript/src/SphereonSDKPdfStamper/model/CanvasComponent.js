/**
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements.    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKPdfStamper/ApiClient', 'SphereonSDKPdfStamper/model/Border', 'SphereonSDKPdfStamper/model/Connector', 'SphereonSDKPdfStamper/model/Point'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Border'), require('./Connector'), require('./Point'));
  } else {
    // Browser globals (root is window)
    if (!root.PdfStamper) {
      root.PdfStamper = {};
    }
    root.PdfStamper.CanvasComponent = factory(root.PdfStamper.ApiClient, root.PdfStamper.Border, root.PdfStamper.Connector, root.PdfStamper.Point);
  }
}(this, function(ApiClient, Border, Connector, Point) {
  'use strict';




  /**
   * The CanvasComponent model module.
   * @module SphereonSDKPdfStamper/model/CanvasComponent
   * @version 1.0
   */

  /**
   * Constructs a new <code>CanvasComponent</code>.
   * A canvas space interconnecting zones on the page to stamp components
   * @alias module:SphereonSDKPdfStamper/model/CanvasComponent
   * @class
   * @param pageSelector {module:SphereonSDKPdfStamper/model/CanvasComponent.PageSelectorEnum} Prescribes the page the component needs to be overlay-ed
   * @param pageOperation {module:SphereonSDKPdfStamper/model/CanvasComponent.PageOperationEnum} The operation that should be executed with the stamp component
   * @param type {String} The discriminator type for serialization of the different components
   */
  var exports = function(pageSelector, pageOperation, type) {
    var _this = this;




    _this['pageSelector'] = pageSelector;

    _this['pageOperation'] = pageOperation;
    _this['type'] = type;
  };

  /**
   * Constructs a <code>CanvasComponent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKPdfStamper/model/CanvasComponent} obj Optional instance to populate.
   * @return {module:SphereonSDKPdfStamper/model/CanvasComponent} The populated <code>CanvasComponent</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('border')) {
        obj['border'] = Border.constructFromObject(data['border']);
      }
      if (data.hasOwnProperty('specificPages')) {
        obj['specificPages'] = ApiClient.convertToType(data['specificPages'], ['Number']);
      }
      if (data.hasOwnProperty('connectors')) {
        obj['connectors'] = ApiClient.convertToType(data['connectors'], [Connector]);
      }
      if (data.hasOwnProperty('pageSelector')) {
        obj['pageSelector'] = ApiClient.convertToType(data['pageSelector'], 'String');
      }
      if (data.hasOwnProperty('offset')) {
        obj['offset'] = Point.constructFromObject(data['offset']);
      }
      if (data.hasOwnProperty('pageOperation')) {
        obj['pageOperation'] = ApiClient.convertToType(data['pageOperation'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
    }
    return obj;
  }

  /**
   * The border of the component
   * @member {module:SphereonSDKPdfStamper/model/Border} border
   */
  exports.prototype['border'] = undefined;
  /**
   * @member {Array.<Number>} specificPages
   */
  exports.prototype['specificPages'] = undefined;
  /**
   * Connectors containing components that can be positioned relative to this component
   * @member {Array.<module:SphereonSDKPdfStamper/model/Connector>} connectors
   */
  exports.prototype['connectors'] = undefined;
  /**
   * Prescribes the page the component needs to be overlay-ed
   * @member {module:SphereonSDKPdfStamper/model/CanvasComponent.PageSelectorEnum} pageSelector
   */
  exports.prototype['pageSelector'] = undefined;
  /**
   * The offset of the component relative to the parent component
   * @member {module:SphereonSDKPdfStamper/model/Point} offset
   */
  exports.prototype['offset'] = undefined;
  /**
   * The operation that should be executed with the stamp component
   * @member {module:SphereonSDKPdfStamper/model/CanvasComponent.PageOperationEnum} pageOperation
   */
  exports.prototype['pageOperation'] = undefined;
  /**
   * The discriminator type for serialization of the different components
   * @member {String} type
   */
  exports.prototype['type'] = undefined;


  /**
   * Allowed values for the <code>pageSelector</code> property.
   * @enum {String}
   * @readonly
   */
  exports.PageSelectorEnum = {
    /**
     * value: "FIRST_PAGE"
     * @const
     */
    "FIRST_PAGE": "FIRST_PAGE",
    /**
     * value: "LAST_PAGE"
     * @const
     */
    "LAST_PAGE": "LAST_PAGE",
    /**
     * value: "EVEN_PAGES"
     * @const
     */
    "EVEN_PAGES": "EVEN_PAGES",
    /**
     * value: "ODD_PAGES"
     * @const
     */
    "ODD_PAGES": "ODD_PAGES",
    /**
     * value: "ALL_PAGES"
     * @const
     */
    "ALL_PAGES": "ALL_PAGES",
    /**
     * value: "SPECIFIC_PAGES"
     * @const
     */
    "SPECIFIC_PAGES": "SPECIFIC_PAGES"  };

  /**
   * Allowed values for the <code>pageOperation</code> property.
   * @enum {String}
   * @readonly
   */
  exports.PageOperationEnum = {
    /**
     * value: "STAMP"
     * @const
     */
    "STAMP": "STAMP"  };


  return exports;
}));


