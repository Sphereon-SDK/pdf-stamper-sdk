/**
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements. The API also supports digital signatures (blue bar), blockchain registrations and filling out forms    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKPdfStamper/ApiClient', 'SphereonSDKPdfStamper/model/InputSettings', 'SphereonSDKPdfStamper/model/ResultSettings'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./InputSettings'), require('./ResultSettings'));
  } else {
    // Browser globals (root is window)
    if (!root.PdfStamper) {
      root.PdfStamper = {};
    }
    root.PdfStamper.DefaultJobSettings = factory(root.PdfStamper.ApiClient, root.PdfStamper.InputSettings, root.PdfStamper.ResultSettings);
  }
}(this, function(ApiClient, InputSettings, ResultSettings) {
  'use strict';




  /**
   * The DefaultJobSettings model module.
   * @module SphereonSDKPdfStamper/model/DefaultJobSettings
   * @version 1.0
   */

  /**
   * Constructs a new <code>DefaultJobSettings</code>.
   * Default PDF Stamper job settings. Whenever a job does not submit the settings, the defaults will be used.
   * @alias module:SphereonSDKPdfStamper/model/DefaultJobSettings
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>DefaultJobSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKPdfStamper/model/DefaultJobSettings} obj Optional instance to populate.
   * @return {module:SphereonSDKPdfStamper/model/DefaultJobSettings} The populated <code>DefaultJobSettings</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('variables')) {
        obj['variables'] = ApiClient.convertToType(data['variables'], {'String': 'String'});
      }
      if (data.hasOwnProperty('resultSettings')) {
        obj['resultSettings'] = ResultSettings.constructFromObject(data['resultSettings']);
      }
      if (data.hasOwnProperty('formFields')) {
        obj['formFields'] = ApiClient.convertToType(data['formFields'], {'String': 'String'});
      }
      if (data.hasOwnProperty('inputSettings')) {
        obj['inputSettings'] = InputSettings.constructFromObject(data['inputSettings']);
      }
    }
    return obj;
  }

  /**
   * A map with key-values used to replace template variables in components. These are optional defaults. Values in job specific variables will overwrite default values.
   * @member {Object.<String, String>} variables
   */
  exports.prototype['variables'] = undefined;
  /**
   * The default result file and lifecycle settings
   * @member {module:SphereonSDKPdfStamper/model/ResultSettings} resultSettings
   */
  exports.prototype['resultSettings'] = undefined;
  /**
   * Form fields are filled out in PDF forms. These are default values used in the job. Please note that these are different from variables, as the latter can only be used for text, barcode and hyperlink components, whilst the form-fields as the name implies are for filling out PDF forms
   * @member {Object.<String, String>} formFields
   */
  exports.prototype['formFields'] = undefined;
  /**
   * The default input file and lifecycle settings
   * @member {module:SphereonSDKPdfStamper/model/InputSettings} inputSettings
   */
  exports.prototype['inputSettings'] = undefined;



  return exports;
}));


