/**
 * PDF stamper
 * The PDF Stamper API enables the possibility to add both static and dynamic stamps on existing PDFs. The stamps can consist of one or more barcode, hyperlink, image, line or text elements. The API also supports digital signatures (blue bar), blockchain registrations and filling out forms    The flow is generally as follows:  1. Make a configuration containing the stamp information  2. Create a job specifying the desired configuration  3. Add one or more PDF files to the job  4. Start the job for processing  5. Retrieve the processed files    Full API Documentation: https://docs.sphereon.com/api/pdf-stamper/1.0  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PdfStamper);
  }
}(this, function(expect, PdfStamper) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PdfStamper.PdfSignatureComponent();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PdfSignatureComponent', function() {
    it('should create an instance of PdfSignatureComponent', function() {
      // uncomment below and update the code to test PdfSignatureComponent
      //var instane = new PdfStamper.PdfSignatureComponent();
      //expect(instance).to.be.a(PdfStamper.PdfSignatureComponent);
    });

    it('should have the property reason (base name: "reason")', function() {
      // uncomment below and update the code to test the property reason
      //var instane = new PdfStamper.PdfSignatureComponent();
      //expect(instance).to.be();
    });

    it('should have the property certificateSettings (base name: "certificateSettings")', function() {
      // uncomment below and update the code to test the property certificateSettings
      //var instane = new PdfStamper.PdfSignatureComponent();
      //expect(instance).to.be();
    });

    it('should have the property visibleSignature (base name: "visibleSignature")', function() {
      // uncomment below and update the code to test the property visibleSignature
      //var instane = new PdfStamper.PdfSignatureComponent();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new PdfStamper.PdfSignatureComponent();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instane = new PdfStamper.PdfSignatureComponent();
      //expect(instance).to.be();
    });

    it('should have the property signatureMode (base name: "signatureMode")', function() {
      // uncomment below and update the code to test the property signatureMode
      //var instane = new PdfStamper.PdfSignatureComponent();
      //expect(instance).to.be();
    });

  });

}));
